{
  "address": "0x5efCf4D044356713218989833def44aC0232E7C0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IMRC",
          "name": "_mrc",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_erc20",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "adminErr",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "contributorAlreadyExistsErr",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "erc20TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "holderErr",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "noFundsWithdrawErr",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "pausedErr",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "projectInvalidParameterErr",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newContributor",
          "type": "address"
        }
      ],
      "name": "newContributorRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newProjectAddress",
          "type": "address"
        }
      ],
      "name": "newProjectCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_colateralCost",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reputationLevel",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxContributorsNumber",
          "type": "uint256"
        }
      ],
      "name": "createProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deleteProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getAccountToContributorData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "wallet",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "reputationLevel",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reputationPoints",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "banned",
              "type": "bool"
            }
          ],
          "internalType": "struct Contributor",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllProject",
      "outputs": [
        {
          "internalType": "contract Project[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getContributor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "wallet",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "reputationLevel",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reputationPoints",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "banned",
              "type": "bool"
            }
          ],
          "internalType": "struct Contributor",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContributorsNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getERC20Interface",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getIsPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMRCInterface",
      "outputs": [
        {
          "internalType": "contract IMRC",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProjects",
      "outputs": [
        {
          "internalType": "contract Project[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProjectsDeleted",
      "outputs": [
        {
          "internalType": "contract Project[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProjectsNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRacksPMOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isContributorBanned",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isWalletContributor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registerContributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "wallet",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "reputationLevel",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reputationPoints",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "banned",
              "type": "bool"
            }
          ],
          "internalType": "struct Contributor",
          "name": "_newData",
          "type": "tuple"
        }
      ],
      "name": "setAccountToContributorData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        }
      ],
      "name": "setContributorStateToBanList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc20",
          "type": "address"
        }
      ],
      "name": "setERC20Address",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_newPausedValue",
          "type": "bool"
        }
      ],
      "name": "setIsPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        }
      ],
      "name": "withdrawAllFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x49b93254de070efc6e31b7f509d1531ad23b470db9f1a2ea5e657ceae1b79996",
  "receipt": {
    "to": null,
    "from": "0x626A29bCcd5a5e2D2736f8Ca717B094dEa159a2A",
    "contractAddress": "0x5efCf4D044356713218989833def44aC0232E7C0",
    "transactionIndex": 0,
    "gasUsed": "5065006",
    "logsBloom": "0x
    "blockHash": "0x81bcb6e1852469dd7f98882e6940270376afef287d27c0d87e5ec6f45aec7dd6",
    "transactionHash": "0x49b93254de070efc6e31b7f509d1531ad23b470db9f1a2ea5e657ceae1b79996",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 11358501,
        "transactionHash": "0x49b93254de070efc6e31b7f509d1531ad23b470db9f1a2ea5e657ceae1b79996",
        "address": "0x5efCf4D044356713218989833def44aC0232E7C0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000626a29bccd5a5e2d2736f8ca717b094dea159a2a"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x81bcb6e1852469dd7f98882e6940270376afef287d27c0d87e5ec6f45aec7dd6"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 11358501,
        "transactionHash": "0x49b93254de070efc6e31b7f509d1531ad23b470db9f1a2ea5e657ceae1b79996",
        "address": "0x5efCf4D044356713218989833def44aC0232E7C0",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000626a29bccd5a5e2d2736f8ca717b094dea159a2a",
          "0x000000000000000000000000626a29bccd5a5e2d2736f8ca717b094dea159a2a"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x81bcb6e1852469dd7f98882e6940270376afef287d27c0d87e5ec6f45aec7dd6"
      }
    ],
    "blockNumber": 11358501,
    "cumulativeGasUsed": "5065006",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc0f6567a4a653d315d829f6d2b3535dce101cd72",
    "0x4e777b826fbD60453CE9701dE5328a45E3fF1d44"
  ],
  "numDeployments": 7,
  "solcInputHash": "3f98244d012c721853be418aacbad2e2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IMRC\",\"name\":\"_mrc\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_erc20\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"adminErr\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"contributorAlreadyExistsErr\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"erc20TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"holderErr\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"noFundsWithdrawErr\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"pausedErr\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"projectInvalidParameterErr\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newContributor\",\"type\":\"address\"}],\"name\":\"newContributorRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newProjectAddress\",\"type\":\"address\"}],\"name\":\"newProjectCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_colateralCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reputationLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxContributorsNumber\",\"type\":\"uint256\"}],\"name\":\"createProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deleteProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAccountToContributorData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reputationLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reputationPoints\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"banned\",\"type\":\"bool\"}],\"internalType\":\"struct Contributor\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllProject\",\"outputs\":[{\"internalType\":\"contract Project[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getContributor\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reputationLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reputationPoints\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"banned\",\"type\":\"bool\"}],\"internalType\":\"struct Contributor\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContributorsNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getERC20Interface\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIsPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMRCInterface\",\"outputs\":[{\"internalType\":\"contract IMRC\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProjects\",\"outputs\":[{\"internalType\":\"contract Project[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProjectsDeleted\",\"outputs\":[{\"internalType\":\"contract Project[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProjectsNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRacksPMOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isContributorBanned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isWalletContributor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerContributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reputationLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reputationPoints\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"banned\",\"type\":\"bool\"}],\"internalType\":\"struct Contributor\",\"name\":\"_newData\",\"type\":\"tuple\"}],\"name\":\"setAccountToContributorData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setContributorStateToBanList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"}],\"name\":\"setERC20Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_newPausedValue\",\"type\":\"bool\"}],\"name\":\"setIsPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"withdrawAllFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addAdmin(address)\":{\"details\":\"Only callable by the Admin\"},\"createProject(string,uint256,uint256,uint256)\":{\"details\":\"Only callable by Admins\"},\"getContributorsNumber()\":{\"details\":\"Only callable by Holders\"},\"getProjects()\":{\"details\":\"Only callable by Holders\"},\"getProjectsNumber()\":{\"details\":\"Only callable by Holders\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isContributorBanned(address)\":{\"details\":\"Only callable by Admins.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerContributor()\":{\"details\":\"Only callable by Holders who are not already Contributors\"},\"removeAdmin(address)\":{\"details\":\"Only callable by the Admin\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setAccountToContributorData(address,(address,uint256,uint256,bool))\":{\"details\":\"Only callable by Admins.\"},\"setContributorStateToBanList(address,bool)\":{\"details\":\"Only callable by Admins.\"},\"setERC20Address(address)\":{\"details\":\"Only callable by the Admin\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawAllFunds(address)\":{\"details\":\"Only owner is able to call this function\"}},\"version\":1},\"userdoc\":{\"events\":{\"newContributorRegistered(address)\":{\"notice\":\"Events\"}},\"kind\":\"user\",\"methods\":{\"addAdmin(address)\":{\"notice\":\"Set new Admin\"},\"createProject(string,uint256,uint256,uint256)\":{\"notice\":\"Create Project\"},\"getAccountToContributorData(address)\":{\"notice\":\"Get Contributor Data by address\"},\"getContributor(uint256)\":{\"notice\":\"Get Contributor by index\"},\"getContributorsNumber()\":{\"notice\":\"Get total number of contributors\"},\"getERC20Interface()\":{\"notice\":\"Returns ERC20 address\"},\"getMRCInterface()\":{\"notice\":\"Returns MRC address\"},\"getProjects()\":{\"notice\":\"Get projects depending on Level\"},\"getProjectsNumber()\":{\"notice\":\"Get total number of projects\"},\"getRacksPMOwner()\":{\"notice\":\"Returns Contract Owner\"},\"isAdmin(address)\":{\"notice\":\"Returns whether an address is admin or not\"},\"isContributorBanned(address)\":{\"notice\":\"Check whether an account is banned or not\"},\"isWalletContributor(address)\":{\"notice\":\"Check whether an address is Contributor or not\"},\"registerContributor()\":{\"notice\":\"Add Contributor\"},\"removeAdmin(address)\":{\"notice\":\"Remove an account from the user role\"},\"setAccountToContributorData(address,(address,uint256,uint256,bool))\":{\"notice\":\"Set Contributor Data by address\"},\"setContributorStateToBanList(address,bool)\":{\"notice\":\"Set a ban state for a Contributor\"},\"setERC20Address(address)\":{\"notice\":\"Set new ERC20 Token\"},\"withdrawAllFunds(address)\":{\"notice\":\"Used to withdraw All funds\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RacksProjectManager.sol\":\"RacksProjectManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Contributor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n/// @notice struct Contributor when a holder has been registered\\r\\nstruct Contributor {\\r\\n    address wallet;\\r\\n    uint256 reputationLevel;\\r\\n    uint256 reputationPoints;\\r\\n    bool banned;\\r\\n}\\r\\n\",\"keccak256\":\"0x26e6f6f25f43fe630974a00265f34cf0fdbd339eecc3b0f24d070928aab0b5ac\",\"license\":\"MIT\"},\"contracts/Err.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nerror adminErr();\\r\\nerror holderErr();\\r\\nerror contributorErr();\\r\\nerror contributorAlreadyExistsErr();\\r\\nerror projectContributorAlreadyExistsErr();\\r\\nerror maxContributorsNumberExceededErr();\\r\\nerror projectContributorIsBannedErr();\\r\\nerror erc20TransferFailed();\\r\\nerror transferGiveAwayFailed();\\r\\nerror projectNoEditableErr();\\r\\nerror projectInvalidParameterErr();\\r\\nerror projectFinishedErr();\\r\\nerror noFundsWithdrawErr();\\r\\nerror noFundsGiveAwayErr();\\r\\nerror notCompletedErr();\\r\\nerror projectContributorHasNoReputationEnoughErr();\\r\\nerror pausedErr();\\r\\nerror deletedErr();\\r\\n\",\"keccak256\":\"0x2d89fcc315429b6297eac2975e63733114afcdd101f0ed22b4203e1fa6e8dced\",\"license\":\"MIT\"},\"contracts/IMRC.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\r\\n\\r\\ninterface IMRC is IERC721Enumerable {\\r\\n    function walletOfOwner(address account) external view returns (uint256[] memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x9efb503f20090bd39074320bc200a84102446cb843518ecb99748eef0640c0c8\",\"license\":\"MIT\"},\"contracts/IRacksProjectManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./Project.sol\\\";\\r\\nimport \\\"./Contributor.sol\\\";\\r\\nimport \\\"./IMRC.sol\\\";\\r\\nimport \\\"./Err.sol\\\";\\r\\n\\r\\ninterface IRacksProjectManager {\\r\\n    /// @notice Events\\r\\n    event newContributorRegistered(address newContributor);\\r\\n    event newProjectCreated(string name, address newProjectAddress);\\r\\n\\r\\n    function isAdmin(address account) external view returns (bool);\\r\\n\\r\\n    function getERC20Interface() external view returns (IERC20);\\r\\n\\r\\n    function getRacksPMOwner() external view returns (address);\\r\\n\\r\\n    function isWalletContributor(address account) external view returns (bool);\\r\\n\\r\\n    function isContributorBanned(address account) external view returns (bool);\\r\\n\\r\\n    function getAccountToContributorData(address account)\\r\\n        external\\r\\n        view\\r\\n        returns (Contributor memory);\\r\\n\\r\\n    function setAccountToContributorData(address account, Contributor memory newData) external;\\r\\n\\r\\n    function getIsPaused() external view returns (bool);\\r\\n\\r\\n    function deleteProject() external;\\r\\n}\\r\\n\",\"keccak256\":\"0x94dee09b6f6a163b60cd2c0ae21f9f334a13644713bf15c0db76d19372d155a2\",\"license\":\"MIT\"},\"contracts/Project.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"./IRacksProjectManager.sol\\\";\\r\\nimport \\\"./Contributor.sol\\\";\\r\\nimport \\\"./Err.sol\\\";\\r\\nimport \\\"./StructuredLinkedList.sol\\\";\\r\\n\\r\\ncontract Project is Ownable, AccessControl {\\r\\n    /// @notice Enumerations\\r\\n    enum ProjectState {\\r\\n        Active,\\r\\n        Finished,\\r\\n        Deleted\\r\\n    }\\r\\n\\r\\n    /// @notice Constants\\r\\n    ProjectState private constant ACTIVE = ProjectState.Active;\\r\\n    ProjectState private constant FINISHED = ProjectState.Finished;\\r\\n    ProjectState private constant DELETED = ProjectState.Deleted;\\r\\n    bytes32 private constant ADMIN_ROLE = 0x00;\\r\\n\\r\\n    /// @notice Interfaces\\r\\n    IRacksProjectManager private immutable racksPM;\\r\\n\\r\\n    /// @notice projectContributors\\r\\n    using StructuredLinkedList for StructuredLinkedList.List;\\r\\n    StructuredLinkedList.List private contributorList;\\r\\n\\r\\n    uint256 private progressiveId = 0;\\r\\n    mapping(uint256 => Contributor) private projectContributors;\\r\\n    mapping(address => uint256) private contributorId;\\r\\n    mapping(address => uint256) private participationOfContributors;\\r\\n\\r\\n    /// @notice State variables\\r\\n    string private name;\\r\\n    uint256 private colateralCost;\\r\\n    uint256 private reputationLevel;\\r\\n    uint256 private maxContributorsNumber;\\r\\n    ProjectState private projectState;\\r\\n    IERC20 private immutable racksPM_ERC20;\\r\\n\\r\\n    /// @notice Check that the project has no contributors, therefore is editable\\r\\n    modifier isEditable() {\\r\\n        if (contributorList.sizeOf() > 0) revert projectNoEditableErr();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Check that the project is not finished\\r\\n    modifier isNotFinished() {\\r\\n        if (projectState == FINISHED) revert projectFinishedErr();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Check that user is Admin\\r\\n    modifier onlyAdmin() {\\r\\n        if (!hasRole(ADMIN_ROLE, msg.sender)) revert adminErr();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Check that user is Contributor\\r\\n    modifier onlyContributor() {\\r\\n        if (!racksPM.isWalletContributor(msg.sender)) revert contributorErr();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Check that the smart contract is not Paused\\r\\n    modifier isNotPaused() {\\r\\n        if (racksPM.getIsPaused()) revert pausedErr();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Check that the smart contract is not Deleted\\r\\n    modifier isNotDeleted() {\\r\\n        if (projectState == DELETED) revert deletedErr();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Events\\r\\n    event newProjectContributorsRegistered(address projectAddress, address newProjectContributor);\\r\\n\\r\\n    constructor(\\r\\n        IRacksProjectManager _racksPM,\\r\\n        string memory _name,\\r\\n        uint256 _colateralCost,\\r\\n        uint256 _reputationLevel,\\r\\n        uint256 _maxContributorsNumber\\r\\n    ) {\\r\\n        if (\\r\\n            _colateralCost <= 0 ||\\r\\n            _reputationLevel <= 0 ||\\r\\n            _maxContributorsNumber <= 0 ||\\r\\n            bytes(_name).length <= 0\\r\\n        ) revert projectInvalidParameterErr();\\r\\n        racksPM = _racksPM;\\r\\n        name = _name;\\r\\n        colateralCost = _colateralCost;\\r\\n        reputationLevel = _reputationLevel;\\r\\n        maxContributorsNumber = _maxContributorsNumber;\\r\\n        _setupRole(ADMIN_ROLE, msg.sender);\\r\\n        _setupRole(ADMIN_ROLE, _racksPM.getRacksPMOwner());\\r\\n        racksPM_ERC20 = _racksPM.getERC20Interface();\\r\\n    }\\r\\n\\r\\n    ////////////////////////\\r\\n    //  Logic Functions  //\\r\\n    //////////////////////\\r\\n\\r\\n    /**\\r\\n     * @notice Add Project Contributor\\r\\n     * @dev Only callable by Holders who are already Contributors\\r\\n     */\\r\\n    function registerProjectContributor()\\r\\n        external\\r\\n        onlyContributor\\r\\n        isNotFinished\\r\\n        isNotPaused\\r\\n        isNotDeleted\\r\\n    {\\r\\n        if (isContributorInProject(msg.sender)) revert projectContributorAlreadyExistsErr();\\r\\n        if (contributorList.sizeOf() == maxContributorsNumber)\\r\\n            revert maxContributorsNumberExceededErr();\\r\\n\\r\\n        Contributor memory contributor = racksPM.getAccountToContributorData(msg.sender);\\r\\n\\r\\n        if (racksPM.isContributorBanned(contributor.wallet)) revert projectContributorIsBannedErr();\\r\\n        if (contributor.reputationLevel < reputationLevel)\\r\\n            revert projectContributorHasNoReputationEnoughErr();\\r\\n\\r\\n        progressiveId++;\\r\\n        projectContributors[progressiveId] = contributor;\\r\\n        contributorList.pushFront(progressiveId);\\r\\n        contributorId[contributor.wallet] = progressiveId;\\r\\n\\r\\n        emit newProjectContributorsRegistered(address(this), msg.sender);\\r\\n\\r\\n        bool success = racksPM_ERC20.transferFrom(msg.sender, address(this), colateralCost);\\r\\n        if (!success) revert erc20TransferFailed();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Finish Project\\r\\n     * @dev Only callable by Admins when the project isn't completed\\r\\n     * - The contributors and participationWeights array must have the same size of the project contributors list.\\r\\n     * - If there is a banned Contributor in the project, you have to pass his address and participation (should be 0) anyways.\\r\\n     * - The sum of @param _participationWeights can not be more than 100\\r\\n     */\\r\\n    function finishProject(\\r\\n        uint256 _totalReputationPointsReward,\\r\\n        address[] memory _contributors,\\r\\n        uint256[] memory _participationWeights\\r\\n    ) external onlyAdmin isNotFinished isNotPaused isNotDeleted {\\r\\n        if (\\r\\n            _totalReputationPointsReward <= 0 ||\\r\\n            _contributors.length != contributorList.sizeOf() ||\\r\\n            _participationWeights.length != contributorList.sizeOf()\\r\\n        ) revert projectInvalidParameterErr();\\r\\n\\r\\n        projectState = FINISHED;\\r\\n        uint256 totalParticipationWeight = 0;\\r\\n        unchecked {\\r\\n            for (uint256 i = 0; i < _contributors.length; i++) {\\r\\n                if (!isContributorInProject(_contributors[i])) revert contributorErr();\\r\\n\\r\\n                uint256 participationWeight = _participationWeights[i];\\r\\n\\r\\n                participationOfContributors[_contributors[i]] = participationWeight;\\r\\n                totalParticipationWeight += participationWeight;\\r\\n            }\\r\\n            if (totalParticipationWeight > 100) revert projectInvalidParameterErr();\\r\\n        }\\r\\n        unchecked {\\r\\n            (bool existNext, uint256 i) = contributorList.getNextNode(0);\\r\\n\\r\\n            while (i != 0 && existNext) {\\r\\n                address contrAddress = getValue(i).wallet;\\r\\n\\r\\n                uint256 reputationToIncrease = (_totalReputationPointsReward *\\r\\n                    participationOfContributors[contrAddress]) / 100;\\r\\n\\r\\n                increaseContributorReputation(reputationToIncrease, i);\\r\\n                racksPM.setAccountToContributorData(contrAddress, getValue(i));\\r\\n\\r\\n                bool success = racksPM_ERC20.transfer(contrAddress, colateralCost);\\r\\n                if (!success) revert erc20TransferFailed();\\r\\n\\r\\n                (existNext, i) = contributorList.getNextNode(i);\\r\\n            }\\r\\n        }\\r\\n        if (racksPM_ERC20.balanceOf(address(this)) > 0) withdrawFunds();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Give Away extra rewards\\r\\n     * @dev Only callable by Admins when the project is completed\\r\\n     */\\r\\n    function giveAway() external onlyAdmin isNotPaused isNotDeleted {\\r\\n        if (projectState != ProjectState.Finished) revert notCompletedErr();\\r\\n\\r\\n        if (address(this).balance <= 0) revert noFundsGiveAwayErr();\\r\\n        unchecked {\\r\\n            uint256 projectBalance = address(this).balance;\\r\\n\\r\\n            (bool existNext, uint256 i) = contributorList.getNextNode(0);\\r\\n\\r\\n            while (i != 0 && existNext) {\\r\\n                address contrAddress = getValue(i).wallet;\\r\\n\\r\\n                (bool success, ) = contrAddress.call{\\r\\n                    value: (projectBalance * participationOfContributors[contrAddress]) / 100\\r\\n                }(\\\"\\\");\\r\\n                if (!success) revert transferGiveAwayFailed();\\r\\n                (existNext, i) = contributorList.getNextNode(i);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ////////////////////////\\r\\n    //  Helper Functions //\\r\\n    //////////////////////\\r\\n\\r\\n    /**\\r\\n     * @notice Used to withdraw All funds\\r\\n     * @dev Only callable by Admins when completing the project\\r\\n     */\\r\\n    function withdrawFunds() private onlyAdmin {\\r\\n        if (racksPM_ERC20.balanceOf(address(this)) <= 0) revert noFundsWithdrawErr();\\r\\n\\r\\n        bool success = racksPM_ERC20.transfer(owner(), racksPM_ERC20.balanceOf(address(this)));\\r\\n        if (!success) revert erc20TransferFailed();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set new Admin\\r\\n     * @dev Only callable by the Admin\\r\\n     */\\r\\n    function addAdmin(address _newAdmin) external onlyOwner isNotDeleted {\\r\\n        grantRole(ADMIN_ROLE, _newAdmin);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Remove an account from the user role\\r\\n     * @dev Only callable by the Admin\\r\\n     */\\r\\n    function removeAdmin(address _account) external virtual onlyOwner isNotDeleted {\\r\\n        revokeRole(ADMIN_ROLE, _account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Increase Contributor's reputation\\r\\n     * @dev Only callable by Admins internally\\r\\n     */\\r\\n    function increaseContributorReputation(uint256 _reputationPointsReward, uint256 _index)\\r\\n        private\\r\\n        onlyAdmin\\r\\n        isNotDeleted\\r\\n    {\\r\\n        unchecked {\\r\\n            Contributor memory _contributor = getValue(_index);\\r\\n\\r\\n            uint256 grossReputationPoints = _contributor.reputationPoints + _reputationPointsReward;\\r\\n\\r\\n            while (grossReputationPoints >= (_contributor.reputationLevel * 100)) {\\r\\n                grossReputationPoints -= (_contributor.reputationLevel * 100);\\r\\n                _contributor.reputationLevel++;\\r\\n            }\\r\\n            _contributor.reputationPoints = grossReputationPoints;\\r\\n\\r\\n            setValue(_index, _contributor);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Provides information about supported interfaces (required by AccessControl)\\r\\n     */\\r\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\\r\\n        return super.supportsInterface(_interfaceId);\\r\\n    }\\r\\n\\r\\n    function deleteProject() public onlyAdmin isNotDeleted isEditable {\\r\\n        projectState = DELETED;\\r\\n\\r\\n        racksPM.deleteProject();\\r\\n    }\\r\\n\\r\\n    function removeContributor(address _contributor, bool _returnColateral)\\r\\n        public\\r\\n        onlyAdmin\\r\\n        isNotDeleted\\r\\n    {\\r\\n        if (!isContributorInProject(_contributor)) revert contributorErr();\\r\\n\\r\\n        uint256 id = contributorId[_contributor];\\r\\n        contributorId[_contributor] = 0;\\r\\n        contributorList.remove(id);\\r\\n\\r\\n        if (_returnColateral) {\\r\\n            bool success = racksPM_ERC20.transfer(_contributor, colateralCost);\\r\\n            if (!success) revert erc20TransferFailed();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ////////////////////////\\r\\n    //  Setter Functions //\\r\\n    //////////////////////\\r\\n\\r\\n    /**\\r\\n     * @notice  the Project Name\\r\\n     * @dev Only callable by Admins when the project has no Contributor yet.\\r\\n     */\\r\\n    function setName(string memory _name) external onlyAdmin isEditable isNotPaused isNotDeleted {\\r\\n        if (bytes(_name).length <= 0) revert projectInvalidParameterErr();\\r\\n        name = _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Edit the Colateral Cost\\r\\n     * @dev Only callable by Admins when the project has no Contributor yet.\\r\\n     */\\r\\n    function setColateralCost(uint256 _colateralCost)\\r\\n        external\\r\\n        onlyAdmin\\r\\n        isEditable\\r\\n        isNotPaused\\r\\n        isNotDeleted\\r\\n    {\\r\\n        if (_colateralCost <= 0) revert projectInvalidParameterErr();\\r\\n        colateralCost = _colateralCost;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Edit the Reputation Level\\r\\n     * @dev Only callable by Admins when the project has no Contributor yet.\\r\\n     */\\r\\n    function setReputationLevel(uint256 _reputationLevel)\\r\\n        external\\r\\n        onlyAdmin\\r\\n        isEditable\\r\\n        isNotPaused\\r\\n        isNotDeleted\\r\\n    {\\r\\n        if (_reputationLevel <= 0) revert projectInvalidParameterErr();\\r\\n        reputationLevel = _reputationLevel;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Edit the Reputation Level\\r\\n     * @dev Only callable by Admins when the project has no Contributor yet.\\r\\n     */\\r\\n    function setMaxContributorsNumber(uint256 _maxContributorsNumber)\\r\\n        external\\r\\n        onlyAdmin\\r\\n        isEditable\\r\\n        isNotPaused\\r\\n        isNotDeleted\\r\\n    {\\r\\n        if (_maxContributorsNumber <= 0) revert projectInvalidParameterErr();\\r\\n        maxContributorsNumber = _maxContributorsNumber;\\r\\n    }\\r\\n\\r\\n    ////////////////////////\\r\\n    //  Getter Functions //\\r\\n    //////////////////////\\r\\n\\r\\n    /// @notice Get the project name\\r\\n    function getName() external view returns (string memory) {\\r\\n        return name;\\r\\n    }\\r\\n\\r\\n    /// @notice Get the colateral cost to enter as contributor\\r\\n    function getColateralCost() external view returns (uint256) {\\r\\n        return colateralCost;\\r\\n    }\\r\\n\\r\\n    /// @notice Get the reputation level of the project\\r\\n    function getReputationLevel() external view returns (uint256) {\\r\\n        return reputationLevel;\\r\\n    }\\r\\n\\r\\n    /// @notice Get the maximum contributor that can be in the project\\r\\n    function getMaxContributors() external view returns (uint256) {\\r\\n        return maxContributorsNumber;\\r\\n    }\\r\\n\\r\\n    /// @notice Get total number of contributors\\r\\n    function getContributorsNumber() external view returns (uint256) {\\r\\n        return contributorList.sizeOf();\\r\\n    }\\r\\n\\r\\n    /// @notice Return true is the project is completed, otherwise return false\\r\\n    function isCompleted() external view returns (bool) {\\r\\n        return projectState == FINISHED;\\r\\n    }\\r\\n\\r\\n    /// @notice Return the contributor in the corresponding index\\r\\n    function getProjectContributor(uint256 _index) external view returns (Contributor memory) {\\r\\n        if (_index < 0) revert projectInvalidParameterErr();\\r\\n        return getValue(_index + 1);\\r\\n    }\\r\\n\\r\\n    /// @notice Return true if the address is a contributor in the project\\r\\n    function isContributorInProject(address _contributor) public view returns (bool) {\\r\\n        return contributorId[_contributor] != 0;\\r\\n    }\\r\\n\\r\\n    /// @notice Get the participation weight in percent\\r\\n    function getContributorParticipationWeight(address _contributor)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return participationOfContributors[_contributor];\\r\\n    }\\r\\n\\r\\n    function getIsActive() external view returns (bool) {\\r\\n        return projectState == ACTIVE;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns whether the project is deleted or not\\r\\n    function getIsDeleted() external view returns (bool) {\\r\\n        return projectState == DELETED;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     */\\r\\n    function getValue(uint256 _id) public view returns (Contributor memory) {\\r\\n        unchecked {\\r\\n            return projectContributors[_id];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     */\\r\\n    function setValue(uint256 _id, Contributor memory _contributor) public {\\r\\n        unchecked {\\r\\n            projectContributors[_id] = _contributor;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x43b95b4fb519767089577cd877e17903892ad7ecdafc7d6582b9ae53aa4ec266\",\"license\":\"MIT\"},\"contracts/RacksProjectManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./IRacksProjectManager.sol\\\";\\r\\nimport \\\"./Project.sol\\\";\\r\\nimport \\\"./Contributor.sol\\\";\\r\\nimport \\\"./IMRC.sol\\\";\\r\\nimport \\\"./Err.sol\\\";\\r\\nimport \\\"./StructuredLinkedList.sol\\\";\\r\\n\\r\\n//              \\u259f\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588\\u2588\\u2588    \\u259f\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n//            \\u259f\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588\\u2588\\u2588  \\u259f\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u259b\\r\\n//           \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588\\u2588\\u2588\\u259f\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u259b  \\u2588\\u2588\\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u259b\\r\\n//            \\u259c\\u2588\\u2588\\u259b    \\u2588\\u2588\\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u259b    \\u2588\\u2588\\u2588\\u2588\\u2588       \\u259f\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u259b    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u259b\\r\\n//              \\u2580     \\u2588\\u2588\\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u259b      \\u2588\\u2588\\u2588\\u2588\\u2588     \\u259f\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u259b\\r\\n//                    \\u2588\\u2588\\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u259b      \\u259f\\u2588\\u2588\\u2588\\u2588\\u2588\\u259b   \\u259f\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u259b\\r\\n//   \\u259f\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588              \\u259f\\u2588\\u2588\\u2588\\u2588\\u2588\\u259b   \\u259f\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u259b   \\u259f\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2599\\r\\n//  \\u259f\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588   \\u259c\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2599          \\u259f\\u2588\\u2588\\u2588\\u2588\\u2588\\u259b   \\u259f\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u259b   \\u259f\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2599\\r\\n// \\u259f\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u259c\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2599      \\u259f\\u2588\\u2588\\u2588\\u2588\\u2588\\u259b   \\u259f\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u259b   \\u259f\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2599\\r\\n//                        \\u259c\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2599            \\u259f\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u259b          \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510\\r\\n//                          \\u259c\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2599        \\u259f\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u259b            \\u2502  LABS  \\u2502\\r\\n//                                                              \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518\\r\\n\\r\\ncontract RacksProjectManager is IRacksProjectManager, Ownable, AccessControl {\\r\\n    /// @notice tokens\\r\\n    IMRC private immutable mrc;\\r\\n    IERC20 private erc20;\\r\\n\\r\\n    /// @notice State variables\\r\\n    bytes32 private constant ADMIN_ROLE = 0x00;\\r\\n    address[] private contributors;\\r\\n    bool private isPaused;\\r\\n    uint256 progressiveId;\\r\\n\\r\\n    using StructuredLinkedList for StructuredLinkedList.List;\\r\\n    StructuredLinkedList.List private projectsList;\\r\\n    mapping(uint256 => Project) private projectStore;\\r\\n    Project[] private projectsDeleted;\\r\\n\\r\\n    mapping(address => bool) private walletIsContributor;\\r\\n    mapping(address => bool) private accountIsBanned;\\r\\n    mapping(address => uint256) private projectId;\\r\\n    mapping(address => Contributor) private accountToContributorData;\\r\\n\\r\\n    /// @notice Check that user is Admin\\r\\n    modifier onlyAdmin() {\\r\\n        if (!hasRole(ADMIN_ROLE, msg.sender)) revert adminErr();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Check that user is Holder or Admin\\r\\n    modifier onlyHolder() {\\r\\n        if (mrc.balanceOf(msg.sender) < 1 && !hasRole(ADMIN_ROLE, msg.sender)) revert holderErr();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Check that user is Contributor\\r\\n    modifier onlyContributor() {\\r\\n        if (!walletIsContributor[msg.sender]) revert contributorErr();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Check that the smart contract is paused\\r\\n    modifier isNotPaused() {\\r\\n        if (isPaused) revert pausedErr();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    //  Constructor  //\\r\\n    ///////////////////\\r\\n    constructor(IMRC _mrc, IERC20 _erc20) {\\r\\n        erc20 = _erc20;\\r\\n        mrc = _mrc;\\r\\n        _setupRole(ADMIN_ROLE, msg.sender);\\r\\n    }\\r\\n\\r\\n    ///////////////////////\\r\\n    //  Logic Functions  //\\r\\n    ///////////////////////\\r\\n\\r\\n    /**\\r\\n     * @notice Create Project\\r\\n     * @dev Only callable by Admins\\r\\n     */\\r\\n    function createProject(\\r\\n        string memory _name,\\r\\n        uint256 _colateralCost,\\r\\n        uint256 _reputationLevel,\\r\\n        uint256 _maxContributorsNumber\\r\\n    ) external onlyAdmin isNotPaused {\\r\\n        if (\\r\\n            _colateralCost <= 0 ||\\r\\n            _reputationLevel <= 0 ||\\r\\n            _maxContributorsNumber <= 0 ||\\r\\n            bytes(_name).length <= 0\\r\\n        ) revert projectInvalidParameterErr();\\r\\n\\r\\n        Project newProject = new Project(\\r\\n            this,\\r\\n            _name,\\r\\n            _colateralCost,\\r\\n            _reputationLevel,\\r\\n            _maxContributorsNumber\\r\\n        );\\r\\n\\r\\n        progressiveId++;\\r\\n        projectStore[progressiveId] = newProject;\\r\\n        projectId[address(newProject)] = progressiveId;\\r\\n        projectsList.pushFront(progressiveId);\\r\\n\\r\\n        _setupRole(ADMIN_ROLE, address(newProject));\\r\\n        emit newProjectCreated(_name, address(newProject));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add Contributor\\r\\n     * @dev Only callable by Holders who are not already Contributors\\r\\n     */\\r\\n    function registerContributor() external onlyHolder isNotPaused {\\r\\n        if (walletIsContributor[msg.sender]) revert contributorAlreadyExistsErr();\\r\\n\\r\\n        contributors.push(msg.sender);\\r\\n        walletIsContributor[msg.sender] = true;\\r\\n        accountToContributorData[msg.sender] = Contributor(msg.sender, 1, 0, false);\\r\\n        emit newContributorRegistered(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to withdraw All funds\\r\\n     * @dev Only owner is able to call this function\\r\\n     */\\r\\n    function withdrawAllFunds(address _wallet) external onlyOwner isNotPaused {\\r\\n        if (erc20.balanceOf(address(this)) <= 0) revert noFundsWithdrawErr();\\r\\n        if (!erc20.transfer(_wallet, erc20.balanceOf(address(this)))) revert erc20TransferFailed();\\r\\n    }\\r\\n\\r\\n    ////////////////////////\\r\\n    //  Helper Functions  //\\r\\n    ////////////////////////\\r\\n\\r\\n    /**\\r\\n     * @notice Set new Admin\\r\\n     * @dev Only callable by the Admin\\r\\n     */\\r\\n    function addAdmin(address _newAdmin) external onlyOwner {\\r\\n        grantRole(ADMIN_ROLE, _newAdmin);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Remove an account from the user role\\r\\n     * @dev Only callable by the Admin\\r\\n     */\\r\\n    function removeAdmin(address _account) external virtual onlyOwner {\\r\\n        revokeRole(ADMIN_ROLE, _account);\\r\\n    }\\r\\n\\r\\n    ///////////////////////\\r\\n    //  Setter Functions //\\r\\n    ///////////////////////\\r\\n\\r\\n    /**\\r\\n     * @notice Set new ERC20 Token\\r\\n     * @dev Only callable by the Admin\\r\\n     */\\r\\n    function setERC20Address(address _erc20) external onlyAdmin {\\r\\n        erc20 = IERC20(_erc20);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set a ban state for a Contributor\\r\\n     * @dev Only callable by Admins.\\r\\n     */\\r\\n    function setContributorStateToBanList(address _account, bool _state) external onlyAdmin {\\r\\n        accountIsBanned[_account] = _state;\\r\\n\\r\\n        if (_state == true) {\\r\\n            (bool existNext, uint256 i) = projectsList.getNextNode(0);\\r\\n\\r\\n            while (i != 0 && existNext) {\\r\\n                Project project = projectStore[i];\\r\\n\\r\\n                if (project.getIsActive() && project.isContributorInProject(_account)) {\\r\\n                    project.removeContributor(_account, false);\\r\\n                }\\r\\n\\r\\n                (existNext, i) = projectsList.getNextNode(i);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set Contributor Data by address\\r\\n     * @dev Only callable by Admins.\\r\\n     */\\r\\n    function setAccountToContributorData(address _account, Contributor memory _newData)\\r\\n        public\\r\\n        override\\r\\n        onlyAdmin\\r\\n    {\\r\\n        accountToContributorData[_account] = _newData;\\r\\n    }\\r\\n\\r\\n    function setIsPaused(bool _newPausedValue) public onlyAdmin {\\r\\n        isPaused = _newPausedValue;\\r\\n    }\\r\\n\\r\\n    ////////////////////////\\r\\n    //  Getter Functions //\\r\\n    //////////////////////\\r\\n\\r\\n    /// @notice Returns whether an address is admin or not\\r\\n    function isAdmin(address _account) public view override returns (bool) {\\r\\n        return hasRole(ADMIN_ROLE, _account);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns MRC address\\r\\n    function getMRCInterface() external view returns (IMRC) {\\r\\n        return mrc;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns ERC20 address\\r\\n    function getERC20Interface() public view override returns (IERC20) {\\r\\n        return erc20;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns Contract Owner\\r\\n    function getRacksPMOwner() public view override returns (address) {\\r\\n        return owner();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Check whether an account is banned or not\\r\\n     * @dev Only callable by Admins.\\r\\n     */\\r\\n    function isContributorBanned(address _account) external view override returns (bool) {\\r\\n        return accountIsBanned[_account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get projects depending on Level\\r\\n     * @dev Only callable by Holders\\r\\n     */\\r\\n    function getProjects() public view onlyHolder returns (Project[] memory) {\\r\\n        if (hasRole(ADMIN_ROLE, msg.sender)) return getAllProject();\\r\\n        Project[] memory filteredProjects = new Project[](projectsList.sizeOf());\\r\\n\\r\\n        unchecked {\\r\\n            uint256 callerReputationLv = walletIsContributor[msg.sender]\\r\\n                ? accountToContributorData[msg.sender].reputationLevel\\r\\n                : 1;\\r\\n            uint256 j = 0;\\r\\n            (bool existNext, uint256 i) = projectsList.getNextNode(0);\\r\\n\\r\\n            while (i != 0 && existNext) {\\r\\n                if (projectStore[i].getReputationLevel() <= callerReputationLv) {\\r\\n                    filteredProjects[j] = projectStore[i];\\r\\n                    j++;\\r\\n                }\\r\\n                (existNext, i) = projectsList.getNextNode(i);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return filteredProjects;\\r\\n    }\\r\\n\\r\\n    function getAllProject() public view returns (Project[] memory) {\\r\\n        Project[] memory allProjects = new Project[](progressiveId);\\r\\n\\r\\n        uint256 j = 0;\\r\\n        (bool existNext, uint256 i) = projectsList.getNextNode(0);\\r\\n\\r\\n        while (i != 0 && existNext) {\\r\\n            allProjects[j] = projectStore[i];\\r\\n            j++;\\r\\n            (existNext, i) = projectsList.getNextNode(i);\\r\\n        }\\r\\n\\r\\n        return allProjects;\\r\\n    }\\r\\n\\r\\n    function getProjectsDeleted() public view returns (Project[] memory) {\\r\\n        return projectsDeleted;\\r\\n    }\\r\\n\\r\\n    /// @notice Get Contributor by index\\r\\n    function getContributor(uint256 _index) public view returns (Contributor memory) {\\r\\n        return accountToContributorData[contributors[_index]];\\r\\n    }\\r\\n\\r\\n    /// @notice Check whether an address is Contributor or not\\r\\n    function isWalletContributor(address _account) public view override returns (bool) {\\r\\n        return walletIsContributor[_account];\\r\\n    }\\r\\n\\r\\n    /// @notice Get Contributor Data by address\\r\\n    function getAccountToContributorData(address _account)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (Contributor memory)\\r\\n    {\\r\\n        return accountToContributorData[_account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get total number of projects\\r\\n     * @dev Only callable by Holders\\r\\n     */\\r\\n    function getProjectsNumber() external view onlyHolder returns (uint256) {\\r\\n        return projectsList.sizeOf();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get total number of contributors\\r\\n     * @dev Only callable by Holders\\r\\n     */\\r\\n    function getContributorsNumber() external view onlyHolder returns (uint256) {\\r\\n        return contributors.length;\\r\\n    }\\r\\n\\r\\n    function getIsPaused() external view override returns (bool) {\\r\\n        return isPaused;\\r\\n    }\\r\\n\\r\\n    function deleteProject() external override {\\r\\n        uint256 id = projectId[msg.sender];\\r\\n\\r\\n        projectId[msg.sender] = 0;\\r\\n\\r\\n        projectsList.remove(id);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcca006698486c30dbf302c8e5cb8537c85682f8a9d257a27d5179b7202ef8613\",\"license\":\"MIT\"},\"contracts/StructuredLinkedList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\ninterface IStructureInterface {\\r\\n    function getValue(uint256 _id) external view returns (uint256);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title StructuredLinkedList\\r\\n * @author Vittorio Minacori (https://github.com/vittominacori)\\r\\n * @dev An utility library for using sorted linked list data structures in your Solidity project.\\r\\n */\\r\\nlibrary StructuredLinkedList {\\r\\n    uint256 private constant _NULL = 0;\\r\\n    uint256 private constant _HEAD = 0;\\r\\n\\r\\n    bool private constant _PREV = false;\\r\\n    bool private constant _NEXT = true;\\r\\n\\r\\n    struct List {\\r\\n        uint256 size;\\r\\n        mapping(uint256 => mapping(bool => uint256)) list;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if the list exists\\r\\n     * @param self stored linked list from contract\\r\\n     * @return bool true if list exists, false otherwise\\r\\n     */\\r\\n    function listExists(List storage self) internal view returns (bool) {\\r\\n        // if the head nodes previous or next pointers both point to itself, then there are no items in the list\\r\\n        if (self.list[_HEAD][_PREV] != _HEAD || self.list[_HEAD][_NEXT] != _HEAD) {\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if the node exists\\r\\n     * @param self stored linked list from contract\\r\\n     * @param _node a node to search for\\r\\n     * @return bool true if node exists, false otherwise\\r\\n     */\\r\\n    function nodeExists(List storage self, uint256 _node) internal view returns (bool) {\\r\\n        if (self.list[_node][_PREV] == _HEAD && self.list[_node][_NEXT] == _HEAD) {\\r\\n            if (self.list[_HEAD][_NEXT] == _node) {\\r\\n                return true;\\r\\n            } else {\\r\\n                return false;\\r\\n            }\\r\\n        } else {\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of elements in the list\\r\\n     * @param self stored linked list from contract\\r\\n     * @return uint256\\r\\n     */\\r\\n    function sizeOf(List storage self) internal view returns (uint256) {\\r\\n        return self.size;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the links of a node as a tuple\\r\\n     * @param self stored linked list from contract\\r\\n     * @param _node id of the node to get\\r\\n     * @return bool, uint256, uint256 true if node exists or false otherwise, previous node, next node\\r\\n     */\\r\\n    function getNode(List storage self, uint256 _node)\\r\\n        internal\\r\\n        view\\r\\n        returns (\\r\\n            bool,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        if (!nodeExists(self, _node)) {\\r\\n            return (false, 0, 0);\\r\\n        } else {\\r\\n            return (true, self.list[_node][_PREV], self.list[_node][_NEXT]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the link of a node `_node` in direction `_direction`.\\r\\n     * @param self stored linked list from contract\\r\\n     * @param _node id of the node to step from\\r\\n     * @param _direction direction to step in\\r\\n     * @return bool, uint256 true if node exists or false otherwise, node in _direction\\r\\n     */\\r\\n    function getAdjacent(\\r\\n        List storage self,\\r\\n        uint256 _node,\\r\\n        bool _direction\\r\\n    ) internal view returns (bool, uint256) {\\r\\n        if (!nodeExists(self, _node)) {\\r\\n            return (false, 0);\\r\\n        } else {\\r\\n            return (true, self.list[_node][_direction]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the link of a node `_node` in direction `_NEXT`.\\r\\n     * @param self stored linked list from contract\\r\\n     * @param _node id of the node to step from\\r\\n     * @return bool, uint256 true if node exists or false otherwise, next node\\r\\n     */\\r\\n    function getNextNode(List storage self, uint256 _node) internal view returns (bool, uint256) {\\r\\n        return getAdjacent(self, _node, _NEXT);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the link of a node `_node` in direction `_PREV`.\\r\\n     * @param self stored linked list from contract\\r\\n     * @param _node id of the node to step from\\r\\n     * @return bool, uint256 true if node exists or false otherwise, previous node\\r\\n     */\\r\\n    function getPreviousNode(List storage self, uint256 _node)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool, uint256)\\r\\n    {\\r\\n        return getAdjacent(self, _node, _PREV);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Can be used before `insert` to build an ordered list.\\r\\n     * @dev Get the node and then `insertBefore` or `insertAfter` basing on your list order.\\r\\n     * @dev If you want to order basing on other than `structure.getValue()` override this function\\r\\n     * @param self stored linked list from contract\\r\\n     * @param _structure the structure instance\\r\\n     * @param _value value to seek\\r\\n     * @return uint256 next node with a value less than _value\\r\\n     */\\r\\n    function getSortedSpot(\\r\\n        List storage self,\\r\\n        address _structure,\\r\\n        uint256 _value\\r\\n    ) internal view returns (uint256) {\\r\\n        if (sizeOf(self) == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 next;\\r\\n        (, next) = getAdjacent(self, _HEAD, _NEXT);\\r\\n        while (\\r\\n            (next != 0) && ((_value < IStructureInterface(_structure).getValue(next)) != _NEXT)\\r\\n        ) {\\r\\n            next = self.list[next][_NEXT];\\r\\n        }\\r\\n        return next;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Insert node `_new` beside existing node `_node` in direction `_NEXT`.\\r\\n     * @param self stored linked list from contract\\r\\n     * @param _node existing node\\r\\n     * @param _new  new node to insert\\r\\n     * @return bool true if success, false otherwise\\r\\n     */\\r\\n    function insertAfter(\\r\\n        List storage self,\\r\\n        uint256 _node,\\r\\n        uint256 _new\\r\\n    ) internal returns (bool) {\\r\\n        return _insert(self, _node, _new, _NEXT);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Insert node `_new` beside existing node `_node` in direction `_PREV`.\\r\\n     * @param self stored linked list from contract\\r\\n     * @param _node existing node\\r\\n     * @param _new  new node to insert\\r\\n     * @return bool true if success, false otherwise\\r\\n     */\\r\\n    function insertBefore(\\r\\n        List storage self,\\r\\n        uint256 _node,\\r\\n        uint256 _new\\r\\n    ) internal returns (bool) {\\r\\n        return _insert(self, _node, _new, _PREV);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes an entry from the linked list\\r\\n     * @param self stored linked list from contract\\r\\n     * @param _node node to remove from the list\\r\\n     * @return uint256 the removed node\\r\\n     */\\r\\n    function remove(List storage self, uint256 _node) internal returns (uint256) {\\r\\n        if ((_node == _NULL) || (!nodeExists(self, _node))) {\\r\\n            return 0;\\r\\n        }\\r\\n        _createLink(self, self.list[_node][_PREV], self.list[_node][_NEXT], _NEXT);\\r\\n        delete self.list[_node][_PREV];\\r\\n        delete self.list[_node][_NEXT];\\r\\n\\r\\n        self.size -= 1; // NOT: SafeMath library should be used here to decrement.\\r\\n\\r\\n        return _node;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pushes an entry to the head of the linked list\\r\\n     * @param self stored linked list from contract\\r\\n     * @param _node new entry to push to the head\\r\\n     * @return bool true if success, false otherwise\\r\\n     */\\r\\n    function pushFront(List storage self, uint256 _node) internal returns (bool) {\\r\\n        return _push(self, _node, _NEXT);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pushes an entry to the tail of the linked list\\r\\n     * @param self stored linked list from contract\\r\\n     * @param _node new entry to push to the tail\\r\\n     * @return bool true if success, false otherwise\\r\\n     */\\r\\n    function pushBack(List storage self, uint256 _node) internal returns (bool) {\\r\\n        return _push(self, _node, _PREV);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pops the first entry from the head of the linked list\\r\\n     * @param self stored linked list from contract\\r\\n     * @return uint256 the removed node\\r\\n     */\\r\\n    function popFront(List storage self) internal returns (uint256) {\\r\\n        return _pop(self, _NEXT);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pops the first entry from the tail of the linked list\\r\\n     * @param self stored linked list from contract\\r\\n     * @return uint256 the removed node\\r\\n     */\\r\\n    function popBack(List storage self) internal returns (uint256) {\\r\\n        return _pop(self, _PREV);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pushes an entry to the head of the linked list\\r\\n     * @param self stored linked list from contract\\r\\n     * @param _node new entry to push to the head\\r\\n     * @param _direction push to the head (_NEXT) or tail (_PREV)\\r\\n     * @return bool true if success, false otherwise\\r\\n     */\\r\\n    function _push(\\r\\n        List storage self,\\r\\n        uint256 _node,\\r\\n        bool _direction\\r\\n    ) private returns (bool) {\\r\\n        return _insert(self, _HEAD, _node, _direction);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pops the first entry from the linked list\\r\\n     * @param self stored linked list from contract\\r\\n     * @param _direction pop from the head (_NEXT) or the tail (_PREV)\\r\\n     * @return uint256 the removed node\\r\\n     */\\r\\n    function _pop(List storage self, bool _direction) private returns (uint256) {\\r\\n        uint256 adj;\\r\\n        (, adj) = getAdjacent(self, _HEAD, _direction);\\r\\n        return remove(self, adj);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Insert node `_new` beside existing node `_node` in direction `_direction`.\\r\\n     * @param self stored linked list from contract\\r\\n     * @param _node existing node\\r\\n     * @param _new  new node to insert\\r\\n     * @param _direction direction to insert node in\\r\\n     * @return bool true if success, false otherwise\\r\\n     */\\r\\n    function _insert(\\r\\n        List storage self,\\r\\n        uint256 _node,\\r\\n        uint256 _new,\\r\\n        bool _direction\\r\\n    ) private returns (bool) {\\r\\n        if (!nodeExists(self, _new) && nodeExists(self, _node)) {\\r\\n            uint256 c = self.list[_node][_direction];\\r\\n            _createLink(self, _node, _new, _direction);\\r\\n            _createLink(self, _new, c, _direction);\\r\\n\\r\\n            self.size += 1; // NOT: SafeMath library should be used here to increment.\\r\\n\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates a bidirectional link between two nodes on direction `_direction`\\r\\n     * @param self stored linked list from contract\\r\\n     * @param _node existing node\\r\\n     * @param _link node to link to in the _direction\\r\\n     * @param _direction direction to insert node in\\r\\n     */\\r\\n    function _createLink(\\r\\n        List storage self,\\r\\n        uint256 _node,\\r\\n        uint256 _link,\\r\\n        bool _direction\\r\\n    ) private {\\r\\n        self.list[_link][!_direction] = _node;\\r\\n        self.list[_node][_direction] = _link;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9321f0b006ad5520e89c2ceb7c869ed7d7cf68de2cb09f3b6a7f34909bcae7c9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162005b8138038062005b81833981016040819052620000349162000169565b6200003f3362000081565b600280546001600160a01b0319166001600160a01b038316179055606082901b6001600160601b03191660805262000079600033620000d1565b5050620001c1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b620000dd8282620000e1565b5050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16620000dd5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b600080604083850312156200017d57600080fd5b82516200018a81620001a8565b60208401519092506200019d81620001a8565b809150509250929050565b6001600160a01b0381168114620001be57600080fd5b50565b60805160601c615985620001fc600039600081816104560152818161064201528181611040015281816112c4015261156801526159856000f3fe60806040523480156200001157600080fd5b5060043610620002315760003560e01c8063715018a61162000131578063cdc6c05a11620000bb578063dcc601281162000086578063dcc6012814620005b0578063de05d1d814620005ba578063f2a6f21514620005c4578063f2fde38b14620005d0578063f385e62f146200042257600080fd5b8063cdc6c05a146200056e578063d547741f1462000578578063d70ed498146200058f578063d753a54e146200059957600080fd5b8063ad961f1311620000fc578063ad961f131462000454578063bb4e37ff146200047b578063bd4fd7b31462000494578063c6f5b0e0146200055757600080fd5b8063715018a614620004185780638da5cb5b146200042257806391d148541462000434578063a217fddf146200044b57600080fd5b80632b6acf8a11620001bf57806341bec0d2116200018a57806341bec0d214620003965780634e87206014620003ad578063610a6a2a14620003d35780636e1989a014620003ea57806370480275146200040157600080fd5b80632b6acf8a14620003225780632f2ff15d146200035157806332dee40b146200036857806336568abe146200037f57600080fd5b8063240976bf1162000200578063240976bf14620002c3578063248a9ca314620002da57806324d7806c14620003015780632941b725146200031857600080fd5b806301ffc9a714620002365780630fa059f31462000262578063123091ae146200027b5780631785f53c14620002aa575b600080fd5b6200024d6200024736600462001fba565b620005e7565b60405190151581526020015b60405180910390f35b6200026c6200061f565b60405190815260200162000259565b6200024d6200028c36600462001e34565b6001600160a01b03166000908152600b602052604090205460ff1690565b620002c1620002bb36600462001e34565b62000703565b005b620002c1620002d436600462001f31565b62000749565b6200026c620002eb36600462001f71565b6000908152600160208190526040909120015490565b6200024d6200031236600462001e34565b62000787565b620002c162000795565b6200024d6200033336600462001e34565b6001600160a01b03166000908152600a602052604090205460ff1690565b620002c16200036236600462001f8b565b620007ba565b620002c16200037936600462001e34565b620007e9565b620002c16200039036600462001f8b565b62000a03565b620002c1620003a736600462001e34565b62000a81565b6002546001600160a01b03165b6040516001600160a01b03909116815260200162000259565b620002c1620003e436600462001fe6565b62000ace565b620002c1620003fb36600462001e52565b62000c58565b620002c16200041236600462001e34565b62000e76565b620002c162000eb0565b6000546001600160a01b0316620003ba565b6200024d6200044536600462001f8b565b62000eeb565b6200026c600081565b7f0000000000000000000000000000000000000000000000000000000000000000620003ba565b6200048562000f16565b6040516200025991906200215c565b62000518620004a536600462001e34565b60408051608080820183526000808352602080840182905283850182905260609384018290526001600160a01b039586168252600d815290849020845192830185528054909516825260018501549082015260028401549281019290925260039092015460ff1615159181019190915290565b60405162000259919081516001600160a01b03168152602080830151908201526040808301519082015260609182015115159181019190915260800190565b620005186200056836600462001f71565b62000f7a565b6200026c6200101d565b620002c16200058936600462001f8b565b620010fc565b6200048562001126565b620002c1620005aa36600462001e8e565b62001219565b62000485620012a1565b620002c162001550565b60045460ff166200024d565b620002c1620005e136600462001e34565b62001772565b60006001600160e01b03198216637965db0b60e01b14806200061957506301ffc9a760e01b6001600160e01b03198316145b92915050565b6040516370a0823160e01b81523360048201526000906001906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156200068557600080fd5b505afa1580156200069a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006c091906200209b565b108015620006d85750620006d660003362000eeb565b155b15620006f757604051630e4316e360e01b815260040160405180910390fd5b5060065490565b905090565b6000546001600160a01b03163314620007395760405162461bcd60e51b815260040162000730906200222f565b60405180910390fd5b62000746600082620010fc565b50565b6200075660003362000eeb565b620007745760405163f2ccaea160e01b815260040160405180910390fd5b6004805460ff1916911515919091179055565b600062000619818362000eeb565b336000908152600c602052604081208054919055620007b660068262001811565b5050565b60008281526001602081905260409091200154620007d881620018b4565b620007e48383620018c0565b505050565b6000546001600160a01b03163314620008165760405162461bcd60e51b815260040162000730906200222f565b60045460ff16156200083b57604051635e0ff51760e01b815260040160405180910390fd5b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156200088057600080fd5b505afa15801562000895573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008bb91906200209b565b11620008da57604051630eecc76760e21b815260040160405180910390fd5b6002546040516370a0823160e01b81523060048201526001600160a01b039091169063a9059cbb90839083906370a082319060240160206040518083038186803b1580156200092857600080fd5b505afa1580156200093d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200096391906200209b565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015620009aa57600080fd5b505af1158015620009bf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009e5919062001f51565b620007465760405163c145dbb160e01b815260040160405180910390fd5b6001600160a01b038116331462000a755760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840162000730565b620007b682826200192e565b62000a8e60003362000eeb565b62000aac5760405163f2ccaea160e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b62000adb60003362000eeb565b62000af95760405163f2ccaea160e01b815260040160405180910390fd5b60045460ff161562000b1e57604051635e0ff51760e01b815260040160405180910390fd5b82158062000b2a575081155b8062000b34575080155b8062000b3f57508351155b1562000b5e57604051637d7469fd60e01b815260040160405180910390fd5b6000308585858560405162000b739062001e09565b62000b83959493929190620021ab565b604051809103906000f08015801562000ba0573d6000803e3d6000fd5b5060058054919250600062000bb58362002338565b909155505060058054600090815260086020908152604080832080546001600160a01b0319166001600160a01b0387169081179091559354938352600c909152902081905562000c089060069062001998565b5062000c16600082620019af565b7fe5fa4b83d53d02837558550b56d2dc3cfdda3e2e3bfad34cb78b26a543235017858260405162000c4992919062002203565b60405180910390a15050505050565b62000c6560003362000eeb565b62000c835760405163f2ccaea160e01b815260040160405180910390fd5b6001600160a01b0382166000908152600b60205260409020805460ff191682151590811790915560011415620007b65760008062000cc3600682620019bb565b915091505b801580159062000cd55750815b1562000e705760008181526008602090815260409182902054825163fba7cc7960e01b815292516001600160a01b0390911692839263fba7cc7992600480840193829003018186803b15801562000d2b57600080fd5b505afa15801562000d40573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d66919062001f51565b801562000deb57506040516308827fb760e31b81526001600160a01b038681166004830152821690634413fdb89060240160206040518083038186803b15801562000db057600080fd5b505afa15801562000dc5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000deb919062001f51565b1562000e5657604051631ff37f3b60e21b81526001600160a01b03868116600483015260006024830152821690637fcdfcec90604401600060405180830381600087803b15801562000e3c57600080fd5b505af115801562000e51573d6000803e3d6000fd5b505050505b62000e63600683620019bb565b909350915062000cc89050565b50505050565b6000546001600160a01b0316331462000ea35760405162461bcd60e51b815260040162000730906200222f565b62000746600082620007ba565b6000546001600160a01b0316331462000edd5760405162461bcd60e51b815260040162000730906200222f565b62000ee96000620019d7565b565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6060600980548060200260200160405190810160405280929190818152602001828054801562000f7057602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000f51575b5050505050905090565b604080516080810182526000808252602082018190529181018290526060810191909152600d60006003848154811062000fb85762000fb86200236c565b60009182526020808320909101546001600160a01b0390811684528382019490945260409283019091208251608081018452815490941684526001810154918401919091526002810154918301919091526003015460ff161515606082015292915050565b6040516370a0823160e01b81523360048201526000906001906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156200108357600080fd5b505afa15801562001098573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010be91906200209b565b108015620010d65750620010d460003362000eeb565b155b15620010f557604051630e4316e360e01b815260040160405180910390fd5b5060035490565b600082815260016020819052604090912001546200111a81620018b4565b620007e483836200192e565b6060600060055467ffffffffffffffff81111562001148576200114862002382565b60405190808252806020026020018201604052801562001172578160200160208202803683370190505b5090506000808062001186600682620019bb565b915091505b8015801590620011985750815b15620012105760008181526008602052604090205484516001600160a01b0390911690859085908110620011d057620011d06200236c565b6001600160a01b039092166020928302919091019091015282620011f48162002338565b9350620012059050600682620019bb565b90925090506200118b565b50919392505050565b6200122660003362000eeb565b620012445760405163f2ccaea160e01b815260040160405180910390fd5b6001600160a01b039182166000908152600d6020908152604091829020835181546001600160a01b031916951694909417845582015160018401558101516002830155606001516003909101805460ff1916911515919091179055565b6040516370a0823160e01b81523360048201526060906001906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156200130757600080fd5b505afa1580156200131c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200134291906200209b565b1080156200135a57506200135860003362000eeb565b155b156200137957604051630e4316e360e01b815260040160405180910390fd5b6200138660003362000eeb565b156200139657620006fe62001126565b6000620013a260065490565b67ffffffffffffffff811115620013bd57620013bd62002382565b604051908082528060200260200182016040528015620013e7578160200160208202803683370190505b50336000908152600a60205260408120549192509060ff166200140c57600162001420565b336000908152600d60205260409020600101545b90506000808062001433600682620019bb565b915091505b8015801590620014455750815b156200154657600081815260086020908152604091829020548251634da9e84960e01b8152925187936001600160a01b0390921692634da9e8499260048082019391829003018186803b1580156200149c57600080fd5b505afa158015620014b1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620014d791906200209b565b116200152e5760008181526008602052604090205485516001600160a01b03909116908690859081106200150f576200150f6200236c565b6001600160a01b03909216602092830291909101909101526001909201915b6200153b600682620019bb565b909250905062001438565b5092935050505090565b6040516370a0823160e01b81523360048201526001907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015620015b357600080fd5b505afa158015620015c8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620015ee91906200209b565b1080156200160657506200160460003362000eeb565b155b156200162557604051630e4316e360e01b815260040160405180910390fd5b60045460ff16156200164a57604051635e0ff51760e01b815260040160405180910390fd5b336000908152600a602052604090205460ff16156200167b57604051623e263360e61b815260040160405180910390fd5b60038054600180820183557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9091018054336001600160a01b031991821681179092556000828152600a60209081526040808320805460ff199081168817909155815160808101835286815280840188815281840186815260608301878152898852600d875296859020925183549098166001600160a01b03909816979097178255519781019790975593516002870155915194909501805490921693151593909317905590519081527f8f444dc6f9b291701e8d4ae03fbb8cb1ce697ddbac3e0969f391589c23523758910160405180910390a1565b6000546001600160a01b031633146200179f5760405162461bcd60e51b815260040162000730906200222f565b6001600160a01b038116620018065760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000730565b6200074681620019d7565b60008115806200182a575062001828838362001a27565b155b15620018395750600062000619565b6000828152600184810160209081526040808420848052909152808320548284529220546200186d92869290919062001ab1565b60008281526001848101602090815260408084208480529091528083208390558183528220829055845490918591620018a8908490620022d5565b90915550919392505050565b62000746813362001ae6565b620018cc828262000eeb565b620007b65760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6200193a828262000eeb565b15620007b65760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000620019a88383600162001b55565b9392505050565b620007b68282620018c0565b600080620019cc8484600162001b6e565b915091509250929050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000818152600183016020908152604080832083805290915281205415801562001a6b57506000828152600180850160209081526040808420928452919052902054155b1562001aa857600080805260018085016020908152604080842092845291905290205482141562001a9f5750600162000619565b50600062000619565b50600162000619565b600082815260019094016020818152604080872093158088529382528087208690559486529081528385209115855252912055565b62001af2828262000eeb565b620007b65762001b0d816001600160a01b0316601462001bb9565b62001b1a83602062001bb9565b60405160200162001b2d929190620020e3565b60408051601f198184030181529082905262461bcd60e51b82526200073091600401620021ee565b600062001b66846000858562001d73565b949350505050565b60008062001b7d858562001a27565b62001b8e5750600090508062001bb1565b505060008281526001848101602090815260408084208515158552909152909120545b935093915050565b6060600062001bca836002620022b3565b62001bd790600262002298565b67ffffffffffffffff81111562001bf25762001bf262002382565b6040519080825280601f01601f19166020018201604052801562001c1d576020820181803683370190505b509050600360fc1b8160008151811062001c3b5762001c3b6200236c565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811062001c6d5762001c6d6200236c565b60200101906001600160f81b031916908160001a905350600062001c93846002620022b3565b62001ca090600162002298565b90505b600181111562001d22576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811062001cd85762001cd86200236c565b1a60f81b82828151811062001cf15762001cf16200236c565b60200101906001600160f81b031916908160001a90535060049490941c9362001d1a816200231e565b905062001ca3565b508315620019a85760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640162000730565b600062001d81858462001a27565b15801562001d96575062001d96858562001a27565b1562001dfe5760008481526001860160209081526040808320851515845290915290205462001dc88686868662001ab1565b62001dd68685838662001ab1565b600186600001600082825462001ded919062002298565b909155506001925062001b66915050565b506000949350505050565b6135a880620023a883390190565b80356001600160a01b038116811462001e2f57600080fd5b919050565b60006020828403121562001e4757600080fd5b620019a88262001e17565b6000806040838503121562001e6657600080fd5b62001e718362001e17565b9150602083013562001e838162002398565b809150509250929050565b60008082840360a081121562001ea357600080fd5b62001eae8462001e17565b92506080601f198201121562001ec357600080fd5b506040516080810181811067ffffffffffffffff8211171562001eea5762001eea62002382565b60405262001efb6020850162001e17565b81526040840135602082015260608401356040820152608084013562001f218162002398565b6060820152919491935090915050565b60006020828403121562001f4457600080fd5b8135620019a88162002398565b60006020828403121562001f6457600080fd5b8151620019a88162002398565b60006020828403121562001f8457600080fd5b5035919050565b6000806040838503121562001f9f57600080fd5b8235915062001fb16020840162001e17565b90509250929050565b60006020828403121562001fcd57600080fd5b81356001600160e01b031981168114620019a857600080fd5b6000806000806080858703121562001ffd57600080fd5b843567ffffffffffffffff808211156200201657600080fd5b818701915087601f8301126200202b57600080fd5b813560208282111562002042576200204262002382565b62002056601f8301601f1916820162002264565b925081835289818386010111156200206d57600080fd5b8181850182850137600091830181019190915290989087013597506040870135966060013595509350505050565b600060208284031215620020ae57600080fd5b5051919050565b60008151808452620020cf816020860160208601620022ef565b601f01601f19169290920160200192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516200211d816017850160208801620022ef565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835162002150816028840160208801620022ef565b01602801949350505050565b6020808252825182820181905260009190848201906040850190845b818110156200219f5783516001600160a01b03168352928401929184019160010162002178565b50909695505050505050565b6001600160a01b038616815260a060208201819052600090620021d190830187620020b5565b604083019590955250606081019290925260809091015292915050565b602081526000620019a86020830184620020b5565b604081526000620022186040830185620020b5565b905060018060a01b03831660208301529392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b604051601f8201601f1916810167ffffffffffffffff8111828210171562002290576200229062002382565b604052919050565b60008219821115620022ae57620022ae62002356565b500190565b6000816000190483118215151615620022d057620022d062002356565b500290565b600082821015620022ea57620022ea62002356565b500390565b60005b838110156200230c578181015183820152602001620022f2565b8381111562000e705750506000910152565b60008162002330576200233062002356565b506000190190565b60006000198214156200234f576200234f62002356565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80151581146200074657600080fdfe60c060405260006004553480156200001657600080fd5b50604051620035a8380380620035a8833981016040819052620000399162000391565b6200004433620001dc565b82158062000050575081155b806200005a575080155b806200006557508351155b156200008457604051637d7469fd60e01b815260040160405180910390fd5b6001600160601b0319606086901b166080528351620000ab906008906020870190620002c4565b506009839055600a829055600b819055620000c86000336200022c565b6200014b6000801b866001600160a01b031663f385e62f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200010a57600080fd5b505afa1580156200011f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200014591906200036a565b6200022c565b846001600160a01b0316634e8720606040518163ffffffff1660e01b815260040160206040518083038186803b1580156200018557600080fd5b505afa1580156200019a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001c091906200036a565b60601b6001600160601b03191660a052506200050b9350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6200023882826200023c565b5050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16620002385760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b828054620002d2906200049f565b90600052602060002090601f016020900481019282620002f6576000855562000341565b82601f106200031157805160ff191683800117855562000341565b8280016001018555821562000341579182015b828111156200034157825182559160200191906001019062000324565b506200034f92915062000353565b5090565b5b808211156200034f576000815560010162000354565b6000602082840312156200037d57600080fd5b81516200038a81620004f2565b9392505050565b600080600080600060a08688031215620003aa57600080fd5b8551620003b781620004f2565b602087810151919650906001600160401b0380821115620003d757600080fd5b818901915089601f830112620003ec57600080fd5b815181811115620004015762000401620004dc565b604051601f8201601f19908116603f011681019083821181831017156200042c576200042c620004dc565b816040528281528c868487010111156200044557600080fd5b600093505b828410156200046957848401860151818501870152928501926200044a565b828411156200047b5760008684830101525b60408c015160608d01516080909d01519b9e919d509b9a9950975050505050505050565b600181811c90821680620004b457607f821691505b60208210811415620004d657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200050857600080fd5b50565b60805160601c60a05160601c612ffa620005ae60003960008181610e3501528181611266015281816113380152818161155d015281816121a201528181612246015261229a01526000818161086d0152818161099e01528181610a7701528181610bc701528181610c6d01528181610f3b015281816111b40152818161164d0152818161182b0152818161198a01528181611ade0152611dc20152612ffa6000f3fe6080604052600436106101fd5760003560e01c80638c3944531161010d578063cdc6c05a116100a0578063e91f760f1161006f578063e91f760f146105c1578063f2fde38b146105e1578063f7723f8114610601578063fa391c6414610616578063fba7cc791461062b57600080fd5b8063cdc6c05a14610557578063d0c433d31461056c578063d547741f14610581578063d85f5f97146105a157600080fd5b80639710ce0f116100dc5780639710ce0f146104ed578063a217fddf14610502578063b612414314610517578063c47f00271461053757600080fd5b80638c394453146104705780638da5cb5b146104855780638df8be65146104ad57806391d14854146104cd57600080fd5b806336568abe11610190578063606aead41161015f578063606aead4146103db57806370480275146103fb578063715018a61461041b5780637fcdfcec14610430578063838e5e621461045057600080fd5b806336568abe1461035957806342bb32fa146103795780634413fdb81461038e5780634da9e849146103c657600080fd5b806317d7de7c116101cc57806317d7de7c146102d1578063248a9ca3146102f35780632941b725146103245780632f2ff15d1461033957600080fd5b806301ffc9a7146102095780630ff4c9161461023e57806311f244f71461026b5780631785f53c146102af57600080fd5b3661020457005b600080fd5b34801561021557600080fd5b50610229610224366004612a00565b610640565b60405190151581526020015b60405180910390f35b34801561024a57600080fd5b5061025e6102593660046129c2565b610651565b6040516102359190612dd7565b34801561027757600080fd5b506102a161028636600461294f565b6001600160a01b031660009081526007602052604090205490565b604051908152602001610235565b3480156102bb57600080fd5b506102cf6102ca36600461294f565b6106c2565b005b3480156102dd57600080fd5b506102e661073b565b6040516102359190612d6f565b3480156102ff57600080fd5b506102a161030e3660046129c2565b6000908152600160208190526040909120015490565b34801561033057600080fd5b506102cf6107cd565b34801561034557600080fd5b506102cf6103543660046129db565b6108e0565b34801561036557600080fd5b506102cf6103743660046129db565b61090b565b34801561038557600080fd5b506102cf610989565b34801561039a57600080fd5b506102296103a936600461294f565b6001600160a01b0316600090815260066020526040902054151590565b3480156103d257600080fd5b50600a546102a1565b3480156103e757600080fd5b506102cf6103f6366004612b4d565b610ed9565b34801561040757600080fd5b506102cf61041636600461294f565b6113c8565b34801561042757600080fd5b506102cf611435565b34801561043c57600080fd5b506102cf61044b36600461296c565b61146b565b34801561045c57600080fd5b506102cf61046b3660046129c2565b6115f9565b34801561047c57600080fd5b50610229611758565b34801561049157600080fd5b506000546040516001600160a01b039091168152602001610235565b3480156104b957600080fd5b5061025e6104c83660046129c2565b61177a565b3480156104d957600080fd5b506102296104e83660046129db565b6117ac565b3480156104f957600080fd5b506009546102a1565b34801561050e57600080fd5b506102a1600081565b34801561052357600080fd5b506102cf6105323660046129c2565b6117d7565b34801561054357600080fd5b506102cf610552366004612a2a565b611936565b34801561056357600080fd5b506102a1611aa4565b34801561057857600080fd5b506102cf611ab4565b34801561058d57600080fd5b506102cf61059c3660046129db565b611cee565b3480156105ad57600080fd5b506102cf6105bc366004612c21565b611d14565b3480156105cd57600080fd5b506102cf6105dc3660046129c2565b611d6e565b3480156105ed57600080fd5b506102cf6105fc36600461294f565b611ecd565b34801561060d57600080fd5b50600b546102a1565b34801561062257600080fd5b50610229611f65565b34801561063757600080fd5b50610229611f6e565b600061064b82611f76565b92915050565b6040805160808082018352600080835260208084018290528385018290526060938401829052948152600585528390208351918201845280546001600160a01b0316825260018101549482019490945260028401549281019290925260039092015460ff1615159181019190915290565b6000546001600160a01b031633146106f55760405162461bcd60e51b81526004016106ec90612da2565b60405180910390fd5b6002600c5460ff16600281111561070e5761070e612f5f565b141561072d57604051639edec15160e01b815260040160405180910390fd5b610738600082611cee565b50565b60606008805461074a90612ef3565b80601f016020809104026020016040519081016040528092919081815260200182805461077690612ef3565b80156107c35780601f10610798576101008083540402835291602001916107c3565b820191906000526020600020905b8154815290600101906020018083116107a657829003601f168201915b5050505050905090565b6107d86000336117ac565b6107f55760405163f2ccaea160e01b815260040160405180910390fd5b6002600c5460ff16600281111561080e5761080e612f5f565b141561082d57604051639edec15160e01b815260040160405180910390fd5b600061083860025490565b11156108575760405163175208ef60e21b815260040160405180910390fd5b600c80546002919060ff191660018302179055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632941b7256040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156108c657600080fd5b505af11580156108da573d6000803e3d6000fd5b50505050565b600082815260016020819052604090912001546108fc81611fab565b6109068383611fb5565b505050565b6001600160a01b038116331461097b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016106ec565b6109858282612020565b5050565b6040516315b567c560e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632b6acf8a9060240160206040518083038186803b1580156109e857600080fd5b505afa1580156109fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2091906129a5565b610a3d576040516389eb8ec360e01b815260040160405180910390fd5b6001600c5460ff166002811115610a5657610a56612f5f565b1415610a7557604051631305bef760e11b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f2a6f2156040518163ffffffff1660e01b815260040160206040518083038186803b158015610ace57600080fd5b505afa158015610ae2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0691906129a5565b15610b2457604051635e0ff51760e01b815260040160405180910390fd5b6002600c5460ff166002811115610b3d57610b3d612f5f565b1415610b5c57604051639edec15160e01b815260040160405180910390fd5b3360009081526006602052604090205415610b8a57604051637e63c82d60e11b815260040160405180910390fd5b600b546002541415610baf57604051633f538f0360e11b815260040160405180910390fd5b60405163bd4fd7b360e01b81523360048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063bd4fd7b39060240160806040518083038186803b158015610c1157600080fd5b505afa158015610c25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c499190612abf565b805160405163091848d760e11b81526001600160a01b0391821660048201529192507f0000000000000000000000000000000000000000000000000000000000000000169063123091ae9060240160206040518083038186803b158015610caf57600080fd5b505afa158015610cc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce791906129a5565b15610d055760405163022a8d2b60e51b815260040160405180910390fd5b600a5481602001511015610d2c57604051630622fed760e41b815260040160405180910390fd5b60048054906000610d3c83612f2e565b909155505060048054600090815260056020908152604091829020845181546001600160a01b0319166001600160a01b039091161781559084015160018201559083015160028083019190915560608401516003909201805460ff1916921515929092179091559054610daf9190612087565b5060045481516001600160a01b031660009081526006602090815260409182902092909255805130815233928101929092527fb2c403c260948e14f478d9c656d65ea064871e2ada0ec4f47a4a9523791e8d36910160405180910390a16009546040516323b872dd60e01b815233600482015230602482015260448101919091526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd90606401602060405180830381600087803b158015610e8157600080fd5b505af1158015610e95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb991906129a5565b9050806109855760405163c145dbb160e01b815260040160405180910390fd5b610ee46000336117ac565b610f015760405163f2ccaea160e01b815260040160405180910390fd5b6001600c5460ff166002811115610f1a57610f1a612f5f565b1415610f3957604051631305bef760e11b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f2a6f2156040518163ffffffff1660e01b815260040160206040518083038186803b158015610f9257600080fd5b505afa158015610fa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fca91906129a5565b15610fe857604051635e0ff51760e01b815260040160405180910390fd5b6002600c5460ff16600281111561100157611001612f5f565b141561102057604051639edec15160e01b815260040160405180910390fd5b8215806110305750600254825114155b8061103e5750600254815114155b1561105c57604051637d7469fd60e01b815260040160405180910390fd5b600c805460ff191660011790556000805b8351811015611133576110b084828151811061108b5761108b612f75565b60200260200101516001600160a01b0316600090815260066020526040902054151590565b6110cd576040516389eb8ec360e01b815260040160405180910390fd5b60008382815181106110e1576110e1612f75565b60200260200101519050806007600087858151811061110257611102612f75565b6020908102919091018101516001600160a01b0316825281019190915260400160002055919091019060010161106d565b50606481111561115657604051637d7469fd60e01b815260040160405180910390fd5b60008061116460028261209c565b915091505b80158015906111755750815b1561131e57600061118582610651565b516001600160a01b0381166000908152600760205260409020549091506064908802046111b281846120b6565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d753a54e836111eb86610651565b6040518363ffffffff1660e01b8152600401611208929190612d29565b600060405180830381600087803b15801561122257600080fd5b505af1158015611236573d6000803e3d6000fd5b505060095460405163a9059cbb60e01b81526001600160a01b0386811660048301526024820192909252600093507f0000000000000000000000000000000000000000000000000000000000000000909116915063a9059cbb90604401602060405180830381600087803b1580156112ad57600080fd5b505af11580156112c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e591906129a5565b9050806113055760405163c145dbb160e01b815260040160405180910390fd5b61131060028561209c565b909550935061116992505050565b50506040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561138257600080fd5b505afa158015611396573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ba9190612b34565b11156108da576108da612162565b6000546001600160a01b031633146113f25760405162461bcd60e51b81526004016106ec90612da2565b6002600c5460ff16600281111561140b5761140b612f5f565b141561142a57604051639edec15160e01b815260040160405180910390fd5b6107386000826108e0565b6000546001600160a01b0316331461145f5760405162461bcd60e51b81526004016106ec90612da2565b61146960006123ba565b565b6114766000336117ac565b6114935760405163f2ccaea160e01b815260040160405180910390fd5b6002600c5460ff1660028111156114ac576114ac612f5f565b14156114cb57604051639edec15160e01b815260040160405180910390fd5b6001600160a01b038216600090815260066020526040902054611501576040516389eb8ec360e01b815260040160405180910390fd5b6001600160a01b0382166000908152600660205260408120805491905561152960028261240a565b5081156109065760095460405163a9059cbb60e01b81526001600160a01b03858116600483015260248201929092526000917f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b1580156115a157600080fd5b505af11580156115b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d991906129a5565b9050806108da5760405163c145dbb160e01b815260040160405180910390fd5b6116046000336117ac565b6116215760405163f2ccaea160e01b815260040160405180910390fd5b600061162c60025490565b111561164b5760405163175208ef60e21b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f2a6f2156040518163ffffffff1660e01b815260040160206040518083038186803b1580156116a457600080fd5b505afa1580156116b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116dc91906129a5565b156116fa57604051635e0ff51760e01b815260040160405180910390fd5b6002600c5460ff16600281111561171357611713612f5f565b141561173257604051639edec15160e01b815260040160405180910390fd5b6000811161175357604051637d7469fd60e01b815260040160405180910390fd5b600955565b600060025b600c5460ff16600281111561177457611774612f5f565b14905090565b60408051608081018252600080825260208201819052918101829052606081019190915261064b610259836001612e62565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6117e26000336117ac565b6117ff5760405163f2ccaea160e01b815260040160405180910390fd5b600061180a60025490565b11156118295760405163175208ef60e21b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f2a6f2156040518163ffffffff1660e01b815260040160206040518083038186803b15801561188257600080fd5b505afa158015611896573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ba91906129a5565b156118d857604051635e0ff51760e01b815260040160405180910390fd5b6002600c5460ff1660028111156118f1576118f1612f5f565b141561191057604051639edec15160e01b815260040160405180910390fd5b6000811161193157604051637d7469fd60e01b815260040160405180910390fd5b600a55565b6119416000336117ac565b61195e5760405163f2ccaea160e01b815260040160405180910390fd5b600061196960025490565b11156119885760405163175208ef60e21b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f2a6f2156040518163ffffffff1660e01b815260040160206040518083038186803b1580156119e157600080fd5b505afa1580156119f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1991906129a5565b15611a3757604051635e0ff51760e01b815260040160405180910390fd5b6002600c5460ff166002811115611a5057611a50612f5f565b1415611a6f57604051639edec15160e01b815260040160405180910390fd5b6000815111611a9157604051637d7469fd60e01b815260040160405180910390fd5b8051610985906008906020840190612844565b6000611aaf60025490565b905090565b611abf6000336117ac565b611adc5760405163f2ccaea160e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f2a6f2156040518163ffffffff1660e01b815260040160206040518083038186803b158015611b3557600080fd5b505afa158015611b49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6d91906129a5565b15611b8b57604051635e0ff51760e01b815260040160405180910390fd5b6002600c5460ff166002811115611ba457611ba4612f5f565b1415611bc357604051639edec15160e01b815260040160405180910390fd5b6001600c5460ff166002811115611bdc57611bdc612f5f565b14611bfa57604051634342f06d60e01b815260040160405180910390fd5b60004711611c1b57604051633868d38360e01b815260040160405180910390fd5b47600080611c2a60028261209c565b915091505b8015801590611c3b5750815b15610906576000611c4b82610651565b516001600160a01b0381166000818152600760205260408120549293509160649087020460405160006040518083038185875af1925050503d8060008114611caf576040519150601f19603f3d011682016040523d82523d6000602084013e611cb4565b606091505b5050905080611cd65760405163169940fd60e21b815260040160405180910390fd5b611ce160028461209c565b9094509250611c2f915050565b60008281526001602081905260409091200154611d0a81611fab565b6109068383612020565b600091825260056020908152604092839020825181546001600160a01b0319166001600160a01b03909116178155908201516001820155918101516002830155606001516003909101805460ff1916911515919091179055565b611d796000336117ac565b611d965760405163f2ccaea160e01b815260040160405180910390fd5b6000611da160025490565b1115611dc05760405163175208ef60e21b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f2a6f2156040518163ffffffff1660e01b815260040160206040518083038186803b158015611e1957600080fd5b505afa158015611e2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5191906129a5565b15611e6f57604051635e0ff51760e01b815260040160405180910390fd5b6002600c5460ff166002811115611e8857611e88612f5f565b1415611ea757604051639edec15160e01b815260040160405180910390fd5b60008111611ec857604051637d7469fd60e01b815260040160405180910390fd5b600b55565b6000546001600160a01b03163314611ef75760405162461bcd60e51b81526004016106ec90612da2565b6001600160a01b038116611f5c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106ec565b610738816123ba565b6000600161175d565b60008061175d565b60006001600160e01b03198216637965db0b60e01b148061064b57506301ffc9a760e01b6001600160e01b031983161461064b565b61073881336124a4565b611fbf82826117ac565b6109855760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b61202a82826117ac565b156109855760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061209583836001612508565b9392505050565b6000806120ab8484600161251f565b915091509250929050565b6120c16000336117ac565b6120de5760405163f2ccaea160e01b815260040160405180910390fd5b6002600c5460ff1660028111156120f7576120f7612f5f565b141561211657604051639edec15160e01b815260040160405180910390fd5b600061212182610651565b604081015190915083015b816020015160640281106121515760208201805160018101909152606402900361212c565b604082018190526108da8383611d14565b61216d6000336117ac565b61218a5760405163f2ccaea160e01b815260040160405180910390fd5b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156121ec57600080fd5b505afa158015612200573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122249190612b34565b1161224257604051630eecc76760e21b815260040160405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb6122856000546001600160a01b031690565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156122e457600080fd5b505afa1580156122f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061231c9190612b34565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561236257600080fd5b505af1158015612376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239a91906129a5565b9050806107385760405163c145dbb160e01b815260040160405180910390fd5b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000811580612420575061241e8383612566565b155b1561242d5750600061064b565b60008281526001848101602090815260408084208480529091528083205482845292205461245f9286929091906125ea565b60008281526001848101602090815260408084208480529091528083208390558183528220829055845490918591612498908490612e99565b90915550919392505050565b6124ae82826117ac565b610985576124c6816001600160a01b0316601461261f565b6124d183602061261f565b6040516020016124e2929190612cb4565b60408051601f198184030181529082905262461bcd60e51b82526106ec91600401612d6f565b600061251784600085856127bb565b949350505050565b60008061252c8585612566565b61253b5750600090508061255e565b505060008281526001848101602090815260408084208515158552909152909120545b935093915050565b600081815260018301602090815260408083208380529091528120541580156125a957506000828152600180850160209081526040808420928452919052902054155b156125e25760008080526001808501602090815260408084209284529190529020548214156125da5750600161064b565b50600061064b565b50600161064b565b600082815260019094016020818152604080872093158088529382528087208690559486529081528385209115855252912055565b6060600061262e836002612e7a565b612639906002612e62565b67ffffffffffffffff81111561265157612651612f8b565b6040519080825280601f01601f19166020018201604052801561267b576020820181803683370190505b509050600360fc1b8160008151811061269657612696612f75565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106126c5576126c5612f75565b60200101906001600160f81b031916908160001a90535060006126e9846002612e7a565b6126f4906001612e62565b90505b600181111561276c576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061272857612728612f75565b1a60f81b82828151811061273e5761273e612f75565b60200101906001600160f81b031916908160001a90535060049490941c9361276581612edc565b90506126f7565b5083156120955760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106ec565b60006127c78584612566565b1580156127d957506127d98585612566565b1561283957600084815260018601602090815260408083208515158452909152902054612808868686866125ea565b612814868583866125ea565b60018660000160008282546128299190612e62565b9091555060019250612517915050565b506000949350505050565b82805461285090612ef3565b90600052602060002090601f01602090048101928261287257600085556128b8565b82601f1061288b57805160ff19168380011785556128b8565b828001600101855582156128b8579182015b828111156128b857825182559160200191906001019061289d565b506128c49291506128c8565b5090565b5b808211156128c457600081556001016128c9565b600082601f8301126128ee57600080fd5b813560206129036128fe83612e3e565b612e0d565b80838252828201915082860187848660051b890101111561292357600080fd5b60005b8581101561294257813584529284019290840190600101612926565b5090979650505050505050565b60006020828403121561296157600080fd5b813561209581612fa1565b6000806040838503121561297f57600080fd5b823561298a81612fa1565b9150602083013561299a81612fb6565b809150509250929050565b6000602082840312156129b757600080fd5b815161209581612fb6565b6000602082840312156129d457600080fd5b5035919050565b600080604083850312156129ee57600080fd5b82359150602083013561299a81612fa1565b600060208284031215612a1257600080fd5b81356001600160e01b03198116811461209557600080fd5b60006020808385031215612a3d57600080fd5b823567ffffffffffffffff80821115612a5557600080fd5b818501915085601f830112612a6957600080fd5b813581811115612a7b57612a7b612f8b565b612a8d601f8201601f19168501612e0d565b91508082528684828501011115612aa357600080fd5b8084840185840137600090820190930192909252509392505050565b600060808284031215612ad157600080fd5b6040516080810181811067ffffffffffffffff82111715612af457612af4612f8b565b6040528251612b0281612fa1565b8082525060208301516020820152604083015160408201526060830151612b2881612fb6565b60608201529392505050565b600060208284031215612b4657600080fd5b5051919050565b600080600060608486031215612b6257600080fd5b8335925060208085013567ffffffffffffffff80821115612b8257600080fd5b818701915087601f830112612b9657600080fd5b8135612ba46128fe82612e3e565b8082825285820191508585018b878560051b8801011115612bc457600080fd5b600095505b83861015612bf0578035612bdc81612fa1565b835260019590950194918601918601612bc9565b50965050506040870135925080831115612c0957600080fd5b5050612c17868287016128dd565b9150509250925092565b60008082840360a0811215612c3557600080fd5b833592506080601f1982011215612c4b57600080fd5b506040516080810181811067ffffffffffffffff82111715612c6f57612c6f612f8b565b6040526020840135612c8081612fa1565b815260408481013560208301526060850135908201526080840135612ca481612fb6565b6060820152919491935090915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612cec816017850160208801612eb0565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612d1d816028840160208801612eb0565b01602801949350505050565b6001600160a01b038316815260a08101612095602083018480516001600160a01b0316825260208082015190830152604080820151908301526060908101511515910152565b6020815260008251806020840152612d8e816040850160208701612eb0565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b81516001600160a01b0316815260208083015190820152604080830151908201526060808301511515908201526080810161064b565b604051601f8201601f1916810167ffffffffffffffff81118282101715612e3657612e36612f8b565b604052919050565b600067ffffffffffffffff821115612e5857612e58612f8b565b5060051b60200190565b60008219821115612e7557612e75612f49565b500190565b6000816000190483118215151615612e9457612e94612f49565b500290565b600082821015612eab57612eab612f49565b500390565b60005b83811015612ecb578181015183820152602001612eb3565b838111156108da5750506000910152565b600081612eeb57612eeb612f49565b506000190190565b600181811c90821680612f0757607f821691505b60208210811415612f2857634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612f4257612f42612f49565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461073857600080fd5b801515811461073857600080fdfea26469706673582212201edee7e8c5048dc7b64f6aac7cdb038a16b521de5fcd808fe6c3aee8f9ea068c64736f6c63430008070033a2646970667358221220cdecd4e5ebd41ae631338072eddf91eb4a5ac6e0cfaf878418d309bde5c6335664736f6c63430008070033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620002315760003560e01c8063715018a61162000131578063cdc6c05a11620000bb578063dcc601281162000086578063dcc6012814620005b0578063de05d1d814620005ba578063f2a6f21514620005c4578063f2fde38b14620005d0578063f385e62f146200042257600080fd5b8063cdc6c05a146200056e578063d547741f1462000578578063d70ed498146200058f578063d753a54e146200059957600080fd5b8063ad961f1311620000fc578063ad961f131462000454578063bb4e37ff146200047b578063bd4fd7b31462000494578063c6f5b0e0146200055757600080fd5b8063715018a614620004185780638da5cb5b146200042257806391d148541462000434578063a217fddf146200044b57600080fd5b80632b6acf8a11620001bf57806341bec0d2116200018a57806341bec0d214620003965780634e87206014620003ad578063610a6a2a14620003d35780636e1989a014620003ea57806370480275146200040157600080fd5b80632b6acf8a14620003225780632f2ff15d146200035157806332dee40b146200036857806336568abe146200037f57600080fd5b8063240976bf1162000200578063240976bf14620002c3578063248a9ca314620002da57806324d7806c14620003015780632941b725146200031857600080fd5b806301ffc9a714620002365780630fa059f31462000262578063123091ae146200027b5780631785f53c14620002aa575b600080fd5b6200024d6200024736600462001fba565b620005e7565b60405190151581526020015b60405180910390f35b6200026c6200061f565b60405190815260200162000259565b6200024d6200028c36600462001e34565b6001600160a01b03166000908152600b602052604090205460ff1690565b620002c1620002bb36600462001e34565b62000703565b005b620002c1620002d436600462001f31565b62000749565b6200026c620002eb36600462001f71565b6000908152600160208190526040909120015490565b6200024d6200031236600462001e34565b62000787565b620002c162000795565b6200024d6200033336600462001e34565b6001600160a01b03166000908152600a602052604090205460ff1690565b620002c16200036236600462001f8b565b620007ba565b620002c16200037936600462001e34565b620007e9565b620002c16200039036600462001f8b565b62000a03565b620002c1620003a736600462001e34565b62000a81565b6002546001600160a01b03165b6040516001600160a01b03909116815260200162000259565b620002c1620003e436600462001fe6565b62000ace565b620002c1620003fb36600462001e52565b62000c58565b620002c16200041236600462001e34565b62000e76565b620002c162000eb0565b6000546001600160a01b0316620003ba565b6200024d6200044536600462001f8b565b62000eeb565b6200026c600081565b7f0000000000000000000000000000000000000000000000000000000000000000620003ba565b6200048562000f16565b6040516200025991906200215c565b62000518620004a536600462001e34565b60408051608080820183526000808352602080840182905283850182905260609384018290526001600160a01b039586168252600d815290849020845192830185528054909516825260018501549082015260028401549281019290925260039092015460ff1615159181019190915290565b60405162000259919081516001600160a01b03168152602080830151908201526040808301519082015260609182015115159181019190915260800190565b620005186200056836600462001f71565b62000f7a565b6200026c6200101d565b620002c16200058936600462001f8b565b620010fc565b6200048562001126565b620002c1620005aa36600462001e8e565b62001219565b62000485620012a1565b620002c162001550565b60045460ff166200024d565b620002c1620005e136600462001e34565b62001772565b60006001600160e01b03198216637965db0b60e01b14806200061957506301ffc9a760e01b6001600160e01b03198316145b92915050565b6040516370a0823160e01b81523360048201526000906001906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156200068557600080fd5b505afa1580156200069a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006c091906200209b565b108015620006d85750620006d660003362000eeb565b155b15620006f757604051630e4316e360e01b815260040160405180910390fd5b5060065490565b905090565b6000546001600160a01b03163314620007395760405162461bcd60e51b815260040162000730906200222f565b60405180910390fd5b62000746600082620010fc565b50565b6200075660003362000eeb565b620007745760405163f2ccaea160e01b815260040160405180910390fd5b6004805460ff1916911515919091179055565b600062000619818362000eeb565b336000908152600c602052604081208054919055620007b660068262001811565b5050565b60008281526001602081905260409091200154620007d881620018b4565b620007e48383620018c0565b505050565b6000546001600160a01b03163314620008165760405162461bcd60e51b815260040162000730906200222f565b60045460ff16156200083b57604051635e0ff51760e01b815260040160405180910390fd5b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156200088057600080fd5b505afa15801562000895573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008bb91906200209b565b11620008da57604051630eecc76760e21b815260040160405180910390fd5b6002546040516370a0823160e01b81523060048201526001600160a01b039091169063a9059cbb90839083906370a082319060240160206040518083038186803b1580156200092857600080fd5b505afa1580156200093d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200096391906200209b565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015620009aa57600080fd5b505af1158015620009bf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009e5919062001f51565b620007465760405163c145dbb160e01b815260040160405180910390fd5b6001600160a01b038116331462000a755760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840162000730565b620007b682826200192e565b62000a8e60003362000eeb565b62000aac5760405163f2ccaea160e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b62000adb60003362000eeb565b62000af95760405163f2ccaea160e01b815260040160405180910390fd5b60045460ff161562000b1e57604051635e0ff51760e01b815260040160405180910390fd5b82158062000b2a575081155b8062000b34575080155b8062000b3f57508351155b1562000b5e57604051637d7469fd60e01b815260040160405180910390fd5b6000308585858560405162000b739062001e09565b62000b83959493929190620021ab565b604051809103906000f08015801562000ba0573d6000803e3d6000fd5b5060058054919250600062000bb58362002338565b909155505060058054600090815260086020908152604080832080546001600160a01b0319166001600160a01b0387169081179091559354938352600c909152902081905562000c089060069062001998565b5062000c16600082620019af565b7fe5fa4b83d53d02837558550b56d2dc3cfdda3e2e3bfad34cb78b26a543235017858260405162000c4992919062002203565b60405180910390a15050505050565b62000c6560003362000eeb565b62000c835760405163f2ccaea160e01b815260040160405180910390fd5b6001600160a01b0382166000908152600b60205260409020805460ff191682151590811790915560011415620007b65760008062000cc3600682620019bb565b915091505b801580159062000cd55750815b1562000e705760008181526008602090815260409182902054825163fba7cc7960e01b815292516001600160a01b0390911692839263fba7cc7992600480840193829003018186803b15801562000d2b57600080fd5b505afa15801562000d40573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d66919062001f51565b801562000deb57506040516308827fb760e31b81526001600160a01b038681166004830152821690634413fdb89060240160206040518083038186803b15801562000db057600080fd5b505afa15801562000dc5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000deb919062001f51565b1562000e5657604051631ff37f3b60e21b81526001600160a01b03868116600483015260006024830152821690637fcdfcec90604401600060405180830381600087803b15801562000e3c57600080fd5b505af115801562000e51573d6000803e3d6000fd5b505050505b62000e63600683620019bb565b909350915062000cc89050565b50505050565b6000546001600160a01b0316331462000ea35760405162461bcd60e51b815260040162000730906200222f565b62000746600082620007ba565b6000546001600160a01b0316331462000edd5760405162461bcd60e51b815260040162000730906200222f565b62000ee96000620019d7565b565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6060600980548060200260200160405190810160405280929190818152602001828054801562000f7057602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000f51575b5050505050905090565b604080516080810182526000808252602082018190529181018290526060810191909152600d60006003848154811062000fb85762000fb86200236c565b60009182526020808320909101546001600160a01b0390811684528382019490945260409283019091208251608081018452815490941684526001810154918401919091526002810154918301919091526003015460ff161515606082015292915050565b6040516370a0823160e01b81523360048201526000906001906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156200108357600080fd5b505afa15801562001098573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010be91906200209b565b108015620010d65750620010d460003362000eeb565b155b15620010f557604051630e4316e360e01b815260040160405180910390fd5b5060035490565b600082815260016020819052604090912001546200111a81620018b4565b620007e483836200192e565b6060600060055467ffffffffffffffff81111562001148576200114862002382565b60405190808252806020026020018201604052801562001172578160200160208202803683370190505b5090506000808062001186600682620019bb565b915091505b8015801590620011985750815b15620012105760008181526008602052604090205484516001600160a01b0390911690859085908110620011d057620011d06200236c565b6001600160a01b039092166020928302919091019091015282620011f48162002338565b9350620012059050600682620019bb565b90925090506200118b565b50919392505050565b6200122660003362000eeb565b620012445760405163f2ccaea160e01b815260040160405180910390fd5b6001600160a01b039182166000908152600d6020908152604091829020835181546001600160a01b031916951694909417845582015160018401558101516002830155606001516003909101805460ff1916911515919091179055565b6040516370a0823160e01b81523360048201526060906001906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156200130757600080fd5b505afa1580156200131c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200134291906200209b565b1080156200135a57506200135860003362000eeb565b155b156200137957604051630e4316e360e01b815260040160405180910390fd5b6200138660003362000eeb565b156200139657620006fe62001126565b6000620013a260065490565b67ffffffffffffffff811115620013bd57620013bd62002382565b604051908082528060200260200182016040528015620013e7578160200160208202803683370190505b50336000908152600a60205260408120549192509060ff166200140c57600162001420565b336000908152600d60205260409020600101545b90506000808062001433600682620019bb565b915091505b8015801590620014455750815b156200154657600081815260086020908152604091829020548251634da9e84960e01b8152925187936001600160a01b0390921692634da9e8499260048082019391829003018186803b1580156200149c57600080fd5b505afa158015620014b1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620014d791906200209b565b116200152e5760008181526008602052604090205485516001600160a01b03909116908690859081106200150f576200150f6200236c565b6001600160a01b03909216602092830291909101909101526001909201915b6200153b600682620019bb565b909250905062001438565b5092935050505090565b6040516370a0823160e01b81523360048201526001907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015620015b357600080fd5b505afa158015620015c8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620015ee91906200209b565b1080156200160657506200160460003362000eeb565b155b156200162557604051630e4316e360e01b815260040160405180910390fd5b60045460ff16156200164a57604051635e0ff51760e01b815260040160405180910390fd5b336000908152600a602052604090205460ff16156200167b57604051623e263360e61b815260040160405180910390fd5b60038054600180820183557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9091018054336001600160a01b031991821681179092556000828152600a60209081526040808320805460ff199081168817909155815160808101835286815280840188815281840186815260608301878152898852600d875296859020925183549098166001600160a01b03909816979097178255519781019790975593516002870155915194909501805490921693151593909317905590519081527f8f444dc6f9b291701e8d4ae03fbb8cb1ce697ddbac3e0969f391589c23523758910160405180910390a1565b6000546001600160a01b031633146200179f5760405162461bcd60e51b815260040162000730906200222f565b6001600160a01b038116620018065760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000730565b6200074681620019d7565b60008115806200182a575062001828838362001a27565b155b15620018395750600062000619565b6000828152600184810160209081526040808420848052909152808320548284529220546200186d92869290919062001ab1565b60008281526001848101602090815260408084208480529091528083208390558183528220829055845490918591620018a8908490620022d5565b90915550919392505050565b62000746813362001ae6565b620018cc828262000eeb565b620007b65760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6200193a828262000eeb565b15620007b65760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000620019a88383600162001b55565b9392505050565b620007b68282620018c0565b600080620019cc8484600162001b6e565b915091509250929050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000818152600183016020908152604080832083805290915281205415801562001a6b57506000828152600180850160209081526040808420928452919052902054155b1562001aa857600080805260018085016020908152604080842092845291905290205482141562001a9f5750600162000619565b50600062000619565b50600162000619565b600082815260019094016020818152604080872093158088529382528087208690559486529081528385209115855252912055565b62001af2828262000eeb565b620007b65762001b0d816001600160a01b0316601462001bb9565b62001b1a83602062001bb9565b60405160200162001b2d929190620020e3565b60408051601f198184030181529082905262461bcd60e51b82526200073091600401620021ee565b600062001b66846000858562001d73565b949350505050565b60008062001b7d858562001a27565b62001b8e5750600090508062001bb1565b505060008281526001848101602090815260408084208515158552909152909120545b935093915050565b6060600062001bca836002620022b3565b62001bd790600262002298565b67ffffffffffffffff81111562001bf25762001bf262002382565b6040519080825280601f01601f19166020018201604052801562001c1d576020820181803683370190505b509050600360fc1b8160008151811062001c3b5762001c3b6200236c565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811062001c6d5762001c6d6200236c565b60200101906001600160f81b031916908160001a905350600062001c93846002620022b3565b62001ca090600162002298565b90505b600181111562001d22576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811062001cd85762001cd86200236c565b1a60f81b82828151811062001cf15762001cf16200236c565b60200101906001600160f81b031916908160001a90535060049490941c9362001d1a816200231e565b905062001ca3565b508315620019a85760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640162000730565b600062001d81858462001a27565b15801562001d96575062001d96858562001a27565b1562001dfe5760008481526001860160209081526040808320851515845290915290205462001dc88686868662001ab1565b62001dd68685838662001ab1565b600186600001600082825462001ded919062002298565b909155506001925062001b66915050565b506000949350505050565b6135a880620023a883390190565b80356001600160a01b038116811462001e2f57600080fd5b919050565b60006020828403121562001e4757600080fd5b620019a88262001e17565b6000806040838503121562001e6657600080fd5b62001e718362001e17565b9150602083013562001e838162002398565b809150509250929050565b60008082840360a081121562001ea357600080fd5b62001eae8462001e17565b92506080601f198201121562001ec357600080fd5b506040516080810181811067ffffffffffffffff8211171562001eea5762001eea62002382565b60405262001efb6020850162001e17565b81526040840135602082015260608401356040820152608084013562001f218162002398565b6060820152919491935090915050565b60006020828403121562001f4457600080fd5b8135620019a88162002398565b60006020828403121562001f6457600080fd5b8151620019a88162002398565b60006020828403121562001f8457600080fd5b5035919050565b6000806040838503121562001f9f57600080fd5b8235915062001fb16020840162001e17565b90509250929050565b60006020828403121562001fcd57600080fd5b81356001600160e01b031981168114620019a857600080fd5b6000806000806080858703121562001ffd57600080fd5b843567ffffffffffffffff808211156200201657600080fd5b818701915087601f8301126200202b57600080fd5b813560208282111562002042576200204262002382565b62002056601f8301601f1916820162002264565b925081835289818386010111156200206d57600080fd5b8181850182850137600091830181019190915290989087013597506040870135966060013595509350505050565b600060208284031215620020ae57600080fd5b5051919050565b60008151808452620020cf816020860160208601620022ef565b601f01601f19169290920160200192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516200211d816017850160208801620022ef565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835162002150816028840160208801620022ef565b01602801949350505050565b6020808252825182820181905260009190848201906040850190845b818110156200219f5783516001600160a01b03168352928401929184019160010162002178565b50909695505050505050565b6001600160a01b038616815260a060208201819052600090620021d190830187620020b5565b604083019590955250606081019290925260809091015292915050565b602081526000620019a86020830184620020b5565b604081526000620022186040830185620020b5565b905060018060a01b03831660208301529392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b604051601f8201601f1916810167ffffffffffffffff8111828210171562002290576200229062002382565b604052919050565b60008219821115620022ae57620022ae62002356565b500190565b6000816000190483118215151615620022d057620022d062002356565b500290565b600082821015620022ea57620022ea62002356565b500390565b60005b838110156200230c578181015183820152602001620022f2565b8381111562000e705750506000910152565b60008162002330576200233062002356565b506000190190565b60006000198214156200234f576200234f62002356565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80151581146200074657600080fdfe60c060405260006004553480156200001657600080fd5b50604051620035a8380380620035a8833981016040819052620000399162000391565b6200004433620001dc565b82158062000050575081155b806200005a575080155b806200006557508351155b156200008457604051637d7469fd60e01b815260040160405180910390fd5b6001600160601b0319606086901b166080528351620000ab906008906020870190620002c4565b506009839055600a829055600b819055620000c86000336200022c565b6200014b6000801b866001600160a01b031663f385e62f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200010a57600080fd5b505afa1580156200011f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200014591906200036a565b6200022c565b846001600160a01b0316634e8720606040518163ffffffff1660e01b815260040160206040518083038186803b1580156200018557600080fd5b505afa1580156200019a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001c091906200036a565b60601b6001600160601b03191660a052506200050b9350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6200023882826200023c565b5050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16620002385760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b828054620002d2906200049f565b90600052602060002090601f016020900481019282620002f6576000855562000341565b82601f106200031157805160ff191683800117855562000341565b8280016001018555821562000341579182015b828111156200034157825182559160200191906001019062000324565b506200034f92915062000353565b5090565b5b808211156200034f576000815560010162000354565b6000602082840312156200037d57600080fd5b81516200038a81620004f2565b9392505050565b600080600080600060a08688031215620003aa57600080fd5b8551620003b781620004f2565b602087810151919650906001600160401b0380821115620003d757600080fd5b818901915089601f830112620003ec57600080fd5b815181811115620004015762000401620004dc565b604051601f8201601f19908116603f011681019083821181831017156200042c576200042c620004dc565b816040528281528c868487010111156200044557600080fd5b600093505b828410156200046957848401860151818501870152928501926200044a565b828411156200047b5760008684830101525b60408c015160608d01516080909d01519b9e919d509b9a9950975050505050505050565b600181811c90821680620004b457607f821691505b60208210811415620004d657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200050857600080fd5b50565b60805160601c60a05160601c612ffa620005ae60003960008181610e3501528181611266015281816113380152818161155d015281816121a201528181612246015261229a01526000818161086d0152818161099e01528181610a7701528181610bc701528181610c6d01528181610f3b015281816111b40152818161164d0152818161182b0152818161198a01528181611ade0152611dc20152612ffa6000f3fe6080604052600436106101fd5760003560e01c80638c3944531161010d578063cdc6c05a116100a0578063e91f760f1161006f578063e91f760f146105c1578063f2fde38b146105e1578063f7723f8114610601578063fa391c6414610616578063fba7cc791461062b57600080fd5b8063cdc6c05a14610557578063d0c433d31461056c578063d547741f14610581578063d85f5f97146105a157600080fd5b80639710ce0f116100dc5780639710ce0f146104ed578063a217fddf14610502578063b612414314610517578063c47f00271461053757600080fd5b80638c394453146104705780638da5cb5b146104855780638df8be65146104ad57806391d14854146104cd57600080fd5b806336568abe11610190578063606aead41161015f578063606aead4146103db57806370480275146103fb578063715018a61461041b5780637fcdfcec14610430578063838e5e621461045057600080fd5b806336568abe1461035957806342bb32fa146103795780634413fdb81461038e5780634da9e849146103c657600080fd5b806317d7de7c116101cc57806317d7de7c146102d1578063248a9ca3146102f35780632941b725146103245780632f2ff15d1461033957600080fd5b806301ffc9a7146102095780630ff4c9161461023e57806311f244f71461026b5780631785f53c146102af57600080fd5b3661020457005b600080fd5b34801561021557600080fd5b50610229610224366004612a00565b610640565b60405190151581526020015b60405180910390f35b34801561024a57600080fd5b5061025e6102593660046129c2565b610651565b6040516102359190612dd7565b34801561027757600080fd5b506102a161028636600461294f565b6001600160a01b031660009081526007602052604090205490565b604051908152602001610235565b3480156102bb57600080fd5b506102cf6102ca36600461294f565b6106c2565b005b3480156102dd57600080fd5b506102e661073b565b6040516102359190612d6f565b3480156102ff57600080fd5b506102a161030e3660046129c2565b6000908152600160208190526040909120015490565b34801561033057600080fd5b506102cf6107cd565b34801561034557600080fd5b506102cf6103543660046129db565b6108e0565b34801561036557600080fd5b506102cf6103743660046129db565b61090b565b34801561038557600080fd5b506102cf610989565b34801561039a57600080fd5b506102296103a936600461294f565b6001600160a01b0316600090815260066020526040902054151590565b3480156103d257600080fd5b50600a546102a1565b3480156103e757600080fd5b506102cf6103f6366004612b4d565b610ed9565b34801561040757600080fd5b506102cf61041636600461294f565b6113c8565b34801561042757600080fd5b506102cf611435565b34801561043c57600080fd5b506102cf61044b36600461296c565b61146b565b34801561045c57600080fd5b506102cf61046b3660046129c2565b6115f9565b34801561047c57600080fd5b50610229611758565b34801561049157600080fd5b506000546040516001600160a01b039091168152602001610235565b3480156104b957600080fd5b5061025e6104c83660046129c2565b61177a565b3480156104d957600080fd5b506102296104e83660046129db565b6117ac565b3480156104f957600080fd5b506009546102a1565b34801561050e57600080fd5b506102a1600081565b34801561052357600080fd5b506102cf6105323660046129c2565b6117d7565b34801561054357600080fd5b506102cf610552366004612a2a565b611936565b34801561056357600080fd5b506102a1611aa4565b34801561057857600080fd5b506102cf611ab4565b34801561058d57600080fd5b506102cf61059c3660046129db565b611cee565b3480156105ad57600080fd5b506102cf6105bc366004612c21565b611d14565b3480156105cd57600080fd5b506102cf6105dc3660046129c2565b611d6e565b3480156105ed57600080fd5b506102cf6105fc36600461294f565b611ecd565b34801561060d57600080fd5b50600b546102a1565b34801561062257600080fd5b50610229611f65565b34801561063757600080fd5b50610229611f6e565b600061064b82611f76565b92915050565b6040805160808082018352600080835260208084018290528385018290526060938401829052948152600585528390208351918201845280546001600160a01b0316825260018101549482019490945260028401549281019290925260039092015460ff1615159181019190915290565b6000546001600160a01b031633146106f55760405162461bcd60e51b81526004016106ec90612da2565b60405180910390fd5b6002600c5460ff16600281111561070e5761070e612f5f565b141561072d57604051639edec15160e01b815260040160405180910390fd5b610738600082611cee565b50565b60606008805461074a90612ef3565b80601f016020809104026020016040519081016040528092919081815260200182805461077690612ef3565b80156107c35780601f10610798576101008083540402835291602001916107c3565b820191906000526020600020905b8154815290600101906020018083116107a657829003601f168201915b5050505050905090565b6107d86000336117ac565b6107f55760405163f2ccaea160e01b815260040160405180910390fd5b6002600c5460ff16600281111561080e5761080e612f5f565b141561082d57604051639edec15160e01b815260040160405180910390fd5b600061083860025490565b11156108575760405163175208ef60e21b815260040160405180910390fd5b600c80546002919060ff191660018302179055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632941b7256040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156108c657600080fd5b505af11580156108da573d6000803e3d6000fd5b50505050565b600082815260016020819052604090912001546108fc81611fab565b6109068383611fb5565b505050565b6001600160a01b038116331461097b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016106ec565b6109858282612020565b5050565b6040516315b567c560e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632b6acf8a9060240160206040518083038186803b1580156109e857600080fd5b505afa1580156109fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2091906129a5565b610a3d576040516389eb8ec360e01b815260040160405180910390fd5b6001600c5460ff166002811115610a5657610a56612f5f565b1415610a7557604051631305bef760e11b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f2a6f2156040518163ffffffff1660e01b815260040160206040518083038186803b158015610ace57600080fd5b505afa158015610ae2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0691906129a5565b15610b2457604051635e0ff51760e01b815260040160405180910390fd5b6002600c5460ff166002811115610b3d57610b3d612f5f565b1415610b5c57604051639edec15160e01b815260040160405180910390fd5b3360009081526006602052604090205415610b8a57604051637e63c82d60e11b815260040160405180910390fd5b600b546002541415610baf57604051633f538f0360e11b815260040160405180910390fd5b60405163bd4fd7b360e01b81523360048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063bd4fd7b39060240160806040518083038186803b158015610c1157600080fd5b505afa158015610c25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c499190612abf565b805160405163091848d760e11b81526001600160a01b0391821660048201529192507f0000000000000000000000000000000000000000000000000000000000000000169063123091ae9060240160206040518083038186803b158015610caf57600080fd5b505afa158015610cc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce791906129a5565b15610d055760405163022a8d2b60e51b815260040160405180910390fd5b600a5481602001511015610d2c57604051630622fed760e41b815260040160405180910390fd5b60048054906000610d3c83612f2e565b909155505060048054600090815260056020908152604091829020845181546001600160a01b0319166001600160a01b039091161781559084015160018201559083015160028083019190915560608401516003909201805460ff1916921515929092179091559054610daf9190612087565b5060045481516001600160a01b031660009081526006602090815260409182902092909255805130815233928101929092527fb2c403c260948e14f478d9c656d65ea064871e2ada0ec4f47a4a9523791e8d36910160405180910390a16009546040516323b872dd60e01b815233600482015230602482015260448101919091526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd90606401602060405180830381600087803b158015610e8157600080fd5b505af1158015610e95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb991906129a5565b9050806109855760405163c145dbb160e01b815260040160405180910390fd5b610ee46000336117ac565b610f015760405163f2ccaea160e01b815260040160405180910390fd5b6001600c5460ff166002811115610f1a57610f1a612f5f565b1415610f3957604051631305bef760e11b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f2a6f2156040518163ffffffff1660e01b815260040160206040518083038186803b158015610f9257600080fd5b505afa158015610fa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fca91906129a5565b15610fe857604051635e0ff51760e01b815260040160405180910390fd5b6002600c5460ff16600281111561100157611001612f5f565b141561102057604051639edec15160e01b815260040160405180910390fd5b8215806110305750600254825114155b8061103e5750600254815114155b1561105c57604051637d7469fd60e01b815260040160405180910390fd5b600c805460ff191660011790556000805b8351811015611133576110b084828151811061108b5761108b612f75565b60200260200101516001600160a01b0316600090815260066020526040902054151590565b6110cd576040516389eb8ec360e01b815260040160405180910390fd5b60008382815181106110e1576110e1612f75565b60200260200101519050806007600087858151811061110257611102612f75565b6020908102919091018101516001600160a01b0316825281019190915260400160002055919091019060010161106d565b50606481111561115657604051637d7469fd60e01b815260040160405180910390fd5b60008061116460028261209c565b915091505b80158015906111755750815b1561131e57600061118582610651565b516001600160a01b0381166000908152600760205260409020549091506064908802046111b281846120b6565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d753a54e836111eb86610651565b6040518363ffffffff1660e01b8152600401611208929190612d29565b600060405180830381600087803b15801561122257600080fd5b505af1158015611236573d6000803e3d6000fd5b505060095460405163a9059cbb60e01b81526001600160a01b0386811660048301526024820192909252600093507f0000000000000000000000000000000000000000000000000000000000000000909116915063a9059cbb90604401602060405180830381600087803b1580156112ad57600080fd5b505af11580156112c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e591906129a5565b9050806113055760405163c145dbb160e01b815260040160405180910390fd5b61131060028561209c565b909550935061116992505050565b50506040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561138257600080fd5b505afa158015611396573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ba9190612b34565b11156108da576108da612162565b6000546001600160a01b031633146113f25760405162461bcd60e51b81526004016106ec90612da2565b6002600c5460ff16600281111561140b5761140b612f5f565b141561142a57604051639edec15160e01b815260040160405180910390fd5b6107386000826108e0565b6000546001600160a01b0316331461145f5760405162461bcd60e51b81526004016106ec90612da2565b61146960006123ba565b565b6114766000336117ac565b6114935760405163f2ccaea160e01b815260040160405180910390fd5b6002600c5460ff1660028111156114ac576114ac612f5f565b14156114cb57604051639edec15160e01b815260040160405180910390fd5b6001600160a01b038216600090815260066020526040902054611501576040516389eb8ec360e01b815260040160405180910390fd5b6001600160a01b0382166000908152600660205260408120805491905561152960028261240a565b5081156109065760095460405163a9059cbb60e01b81526001600160a01b03858116600483015260248201929092526000917f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b1580156115a157600080fd5b505af11580156115b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d991906129a5565b9050806108da5760405163c145dbb160e01b815260040160405180910390fd5b6116046000336117ac565b6116215760405163f2ccaea160e01b815260040160405180910390fd5b600061162c60025490565b111561164b5760405163175208ef60e21b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f2a6f2156040518163ffffffff1660e01b815260040160206040518083038186803b1580156116a457600080fd5b505afa1580156116b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116dc91906129a5565b156116fa57604051635e0ff51760e01b815260040160405180910390fd5b6002600c5460ff16600281111561171357611713612f5f565b141561173257604051639edec15160e01b815260040160405180910390fd5b6000811161175357604051637d7469fd60e01b815260040160405180910390fd5b600955565b600060025b600c5460ff16600281111561177457611774612f5f565b14905090565b60408051608081018252600080825260208201819052918101829052606081019190915261064b610259836001612e62565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6117e26000336117ac565b6117ff5760405163f2ccaea160e01b815260040160405180910390fd5b600061180a60025490565b11156118295760405163175208ef60e21b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f2a6f2156040518163ffffffff1660e01b815260040160206040518083038186803b15801561188257600080fd5b505afa158015611896573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ba91906129a5565b156118d857604051635e0ff51760e01b815260040160405180910390fd5b6002600c5460ff1660028111156118f1576118f1612f5f565b141561191057604051639edec15160e01b815260040160405180910390fd5b6000811161193157604051637d7469fd60e01b815260040160405180910390fd5b600a55565b6119416000336117ac565b61195e5760405163f2ccaea160e01b815260040160405180910390fd5b600061196960025490565b11156119885760405163175208ef60e21b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f2a6f2156040518163ffffffff1660e01b815260040160206040518083038186803b1580156119e157600080fd5b505afa1580156119f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1991906129a5565b15611a3757604051635e0ff51760e01b815260040160405180910390fd5b6002600c5460ff166002811115611a5057611a50612f5f565b1415611a6f57604051639edec15160e01b815260040160405180910390fd5b6000815111611a9157604051637d7469fd60e01b815260040160405180910390fd5b8051610985906008906020840190612844565b6000611aaf60025490565b905090565b611abf6000336117ac565b611adc5760405163f2ccaea160e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f2a6f2156040518163ffffffff1660e01b815260040160206040518083038186803b158015611b3557600080fd5b505afa158015611b49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6d91906129a5565b15611b8b57604051635e0ff51760e01b815260040160405180910390fd5b6002600c5460ff166002811115611ba457611ba4612f5f565b1415611bc357604051639edec15160e01b815260040160405180910390fd5b6001600c5460ff166002811115611bdc57611bdc612f5f565b14611bfa57604051634342f06d60e01b815260040160405180910390fd5b60004711611c1b57604051633868d38360e01b815260040160405180910390fd5b47600080611c2a60028261209c565b915091505b8015801590611c3b5750815b15610906576000611c4b82610651565b516001600160a01b0381166000818152600760205260408120549293509160649087020460405160006040518083038185875af1925050503d8060008114611caf576040519150601f19603f3d011682016040523d82523d6000602084013e611cb4565b606091505b5050905080611cd65760405163169940fd60e21b815260040160405180910390fd5b611ce160028461209c565b9094509250611c2f915050565b60008281526001602081905260409091200154611d0a81611fab565b6109068383612020565b600091825260056020908152604092839020825181546001600160a01b0319166001600160a01b03909116178155908201516001820155918101516002830155606001516003909101805460ff1916911515919091179055565b611d796000336117ac565b611d965760405163f2ccaea160e01b815260040160405180910390fd5b6000611da160025490565b1115611dc05760405163175208ef60e21b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f2a6f2156040518163ffffffff1660e01b815260040160206040518083038186803b158015611e1957600080fd5b505afa158015611e2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5191906129a5565b15611e6f57604051635e0ff51760e01b815260040160405180910390fd5b6002600c5460ff166002811115611e8857611e88612f5f565b1415611ea757604051639edec15160e01b815260040160405180910390fd5b60008111611ec857604051637d7469fd60e01b815260040160405180910390fd5b600b55565b6000546001600160a01b03163314611ef75760405162461bcd60e51b81526004016106ec90612da2565b6001600160a01b038116611f5c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106ec565b610738816123ba565b6000600161175d565b60008061175d565b60006001600160e01b03198216637965db0b60e01b148061064b57506301ffc9a760e01b6001600160e01b031983161461064b565b61073881336124a4565b611fbf82826117ac565b6109855760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b61202a82826117ac565b156109855760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061209583836001612508565b9392505050565b6000806120ab8484600161251f565b915091509250929050565b6120c16000336117ac565b6120de5760405163f2ccaea160e01b815260040160405180910390fd5b6002600c5460ff1660028111156120f7576120f7612f5f565b141561211657604051639edec15160e01b815260040160405180910390fd5b600061212182610651565b604081015190915083015b816020015160640281106121515760208201805160018101909152606402900361212c565b604082018190526108da8383611d14565b61216d6000336117ac565b61218a5760405163f2ccaea160e01b815260040160405180910390fd5b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156121ec57600080fd5b505afa158015612200573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122249190612b34565b1161224257604051630eecc76760e21b815260040160405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb6122856000546001600160a01b031690565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156122e457600080fd5b505afa1580156122f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061231c9190612b34565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561236257600080fd5b505af1158015612376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239a91906129a5565b9050806107385760405163c145dbb160e01b815260040160405180910390fd5b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000811580612420575061241e8383612566565b155b1561242d5750600061064b565b60008281526001848101602090815260408084208480529091528083205482845292205461245f9286929091906125ea565b60008281526001848101602090815260408084208480529091528083208390558183528220829055845490918591612498908490612e99565b90915550919392505050565b6124ae82826117ac565b610985576124c6816001600160a01b0316601461261f565b6124d183602061261f565b6040516020016124e2929190612cb4565b60408051601f198184030181529082905262461bcd60e51b82526106ec91600401612d6f565b600061251784600085856127bb565b949350505050565b60008061252c8585612566565b61253b5750600090508061255e565b505060008281526001848101602090815260408084208515158552909152909120545b935093915050565b600081815260018301602090815260408083208380529091528120541580156125a957506000828152600180850160209081526040808420928452919052902054155b156125e25760008080526001808501602090815260408084209284529190529020548214156125da5750600161064b565b50600061064b565b50600161064b565b600082815260019094016020818152604080872093158088529382528087208690559486529081528385209115855252912055565b6060600061262e836002612e7a565b612639906002612e62565b67ffffffffffffffff81111561265157612651612f8b565b6040519080825280601f01601f19166020018201604052801561267b576020820181803683370190505b509050600360fc1b8160008151811061269657612696612f75565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106126c5576126c5612f75565b60200101906001600160f81b031916908160001a90535060006126e9846002612e7a565b6126f4906001612e62565b90505b600181111561276c576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061272857612728612f75565b1a60f81b82828151811061273e5761273e612f75565b60200101906001600160f81b031916908160001a90535060049490941c9361276581612edc565b90506126f7565b5083156120955760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106ec565b60006127c78584612566565b1580156127d957506127d98585612566565b1561283957600084815260018601602090815260408083208515158452909152902054612808868686866125ea565b612814868583866125ea565b60018660000160008282546128299190612e62565b9091555060019250612517915050565b506000949350505050565b82805461285090612ef3565b90600052602060002090601f01602090048101928261287257600085556128b8565b82601f1061288b57805160ff19168380011785556128b8565b828001600101855582156128b8579182015b828111156128b857825182559160200191906001019061289d565b506128c49291506128c8565b5090565b5b808211156128c457600081556001016128c9565b600082601f8301126128ee57600080fd5b813560206129036128fe83612e3e565b612e0d565b80838252828201915082860187848660051b890101111561292357600080fd5b60005b8581101561294257813584529284019290840190600101612926565b5090979650505050505050565b60006020828403121561296157600080fd5b813561209581612fa1565b6000806040838503121561297f57600080fd5b823561298a81612fa1565b9150602083013561299a81612fb6565b809150509250929050565b6000602082840312156129b757600080fd5b815161209581612fb6565b6000602082840312156129d457600080fd5b5035919050565b600080604083850312156129ee57600080fd5b82359150602083013561299a81612fa1565b600060208284031215612a1257600080fd5b81356001600160e01b03198116811461209557600080fd5b60006020808385031215612a3d57600080fd5b823567ffffffffffffffff80821115612a5557600080fd5b818501915085601f830112612a6957600080fd5b813581811115612a7b57612a7b612f8b565b612a8d601f8201601f19168501612e0d565b91508082528684828501011115612aa357600080fd5b8084840185840137600090820190930192909252509392505050565b600060808284031215612ad157600080fd5b6040516080810181811067ffffffffffffffff82111715612af457612af4612f8b565b6040528251612b0281612fa1565b8082525060208301516020820152604083015160408201526060830151612b2881612fb6565b60608201529392505050565b600060208284031215612b4657600080fd5b5051919050565b600080600060608486031215612b6257600080fd5b8335925060208085013567ffffffffffffffff80821115612b8257600080fd5b818701915087601f830112612b9657600080fd5b8135612ba46128fe82612e3e565b8082825285820191508585018b878560051b8801011115612bc457600080fd5b600095505b83861015612bf0578035612bdc81612fa1565b835260019590950194918601918601612bc9565b50965050506040870135925080831115612c0957600080fd5b5050612c17868287016128dd565b9150509250925092565b60008082840360a0811215612c3557600080fd5b833592506080601f1982011215612c4b57600080fd5b506040516080810181811067ffffffffffffffff82111715612c6f57612c6f612f8b565b6040526020840135612c8081612fa1565b815260408481013560208301526060850135908201526080840135612ca481612fb6565b6060820152919491935090915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612cec816017850160208801612eb0565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612d1d816028840160208801612eb0565b01602801949350505050565b6001600160a01b038316815260a08101612095602083018480516001600160a01b0316825260208082015190830152604080820151908301526060908101511515910152565b6020815260008251806020840152612d8e816040850160208701612eb0565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b81516001600160a01b0316815260208083015190820152604080830151908201526060808301511515908201526080810161064b565b604051601f8201601f1916810167ffffffffffffffff81118282101715612e3657612e36612f8b565b604052919050565b600067ffffffffffffffff821115612e5857612e58612f8b565b5060051b60200190565b60008219821115612e7557612e75612f49565b500190565b6000816000190483118215151615612e9457612e94612f49565b500290565b600082821015612eab57612eab612f49565b500390565b60005b83811015612ecb578181015183820152602001612eb3565b838111156108da5750506000910152565b600081612eeb57612eeb612f49565b506000190190565b600181811c90821680612f0757607f821691505b60208210811415612f2857634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612f4257612f42612f49565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461073857600080fd5b801515811461073857600080fdfea26469706673582212201edee7e8c5048dc7b64f6aac7cdb038a16b521de5fcd808fe6c3aee8f9ea068c64736f6c63430008070033a2646970667358221220cdecd4e5ebd41ae631338072eddf91eb4a5ac6e0cfaf878418d309bde5c6335664736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addAdmin(address)": {
        "details": "Only callable by the Admin"
      },
      "createProject(string,uint256,uint256,uint256)": {
        "details": "Only callable by Admins"
      },
      "getContributorsNumber()": {
        "details": "Only callable by Holders"
      },
      "getProjects()": {
        "details": "Only callable by Holders"
      },
      "getProjectsNumber()": {
        "details": "Only callable by Holders"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isContributorBanned(address)": {
        "details": "Only callable by Admins."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "registerContributor()": {
        "details": "Only callable by Holders who are not already Contributors"
      },
      "removeAdmin(address)": {
        "details": "Only callable by the Admin"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setAccountToContributorData(address,(address,uint256,uint256,bool))": {
        "details": "Only callable by Admins."
      },
      "setContributorStateToBanList(address,bool)": {
        "details": "Only callable by Admins."
      },
      "setERC20Address(address)": {
        "details": "Only callable by the Admin"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawAllFunds(address)": {
        "details": "Only owner is able to call this function"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "newContributorRegistered(address)": {
        "notice": "Events"
      }
    },
    "kind": "user",
    "methods": {
      "addAdmin(address)": {
        "notice": "Set new Admin"
      },
      "createProject(string,uint256,uint256,uint256)": {
        "notice": "Create Project"
      },
      "getAccountToContributorData(address)": {
        "notice": "Get Contributor Data by address"
      },
      "getContributor(uint256)": {
        "notice": "Get Contributor by index"
      },
      "getContributorsNumber()": {
        "notice": "Get total number of contributors"
      },
      "getERC20Interface()": {
        "notice": "Returns ERC20 address"
      },
      "getMRCInterface()": {
        "notice": "Returns MRC address"
      },
      "getProjects()": {
        "notice": "Get projects depending on Level"
      },
      "getProjectsNumber()": {
        "notice": "Get total number of projects"
      },
      "getRacksPMOwner()": {
        "notice": "Returns Contract Owner"
      },
      "isAdmin(address)": {
        "notice": "Returns whether an address is admin or not"
      },
      "isContributorBanned(address)": {
        "notice": "Check whether an account is banned or not"
      },
      "isWalletContributor(address)": {
        "notice": "Check whether an address is Contributor or not"
      },
      "registerContributor()": {
        "notice": "Add Contributor"
      },
      "removeAdmin(address)": {
        "notice": "Remove an account from the user role"
      },
      "setAccountToContributorData(address,(address,uint256,uint256,bool))": {
        "notice": "Set Contributor Data by address"
      },
      "setContributorStateToBanList(address,bool)": {
        "notice": "Set a ban state for a Contributor"
      },
      "setERC20Address(address)": {
        "notice": "Set new ERC20 Token"
      },
      "withdrawAllFunds(address)": {
        "notice": "Used to withdraw All funds"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 400,
        "contract": "contracts/RacksProjectManager.sol:RacksProjectManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 24,
        "contract": "contracts/RacksProjectManager.sol:RacksProjectManager",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 4423,
        "contract": "contracts/RacksProjectManager.sol:RacksProjectManager",
        "label": "erc20",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)1161"
      },
      {
        "astId": 4430,
        "contract": "contracts/RacksProjectManager.sol:RacksProjectManager",
        "label": "contributors",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4432,
        "contract": "contracts/RacksProjectManager.sol:RacksProjectManager",
        "label": "isPaused",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 4434,
        "contract": "contracts/RacksProjectManager.sol:RacksProjectManager",
        "label": "progressiveId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 4441,
        "contract": "contracts/RacksProjectManager.sol:RacksProjectManager",
        "label": "projectsList",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(List)5250_storage"
      },
      {
        "astId": 4446,
        "contract": "contracts/RacksProjectManager.sol:RacksProjectManager",
        "label": "projectStore",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_contract(Project)4399)"
      },
      {
        "astId": 4450,
        "contract": "contracts/RacksProjectManager.sol:RacksProjectManager",
        "label": "projectsDeleted",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_contract(Project)4399)dyn_storage"
      },
      {
        "astId": 4454,
        "contract": "contracts/RacksProjectManager.sol:RacksProjectManager",
        "label": "walletIsContributor",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4458,
        "contract": "contracts/RacksProjectManager.sol:RacksProjectManager",
        "label": "accountIsBanned",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4462,
        "contract": "contracts/RacksProjectManager.sol:RacksProjectManager",
        "label": "projectId",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4467,
        "contract": "contracts/RacksProjectManager.sol:RacksProjectManager",
        "label": "accountToContributorData",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_struct(Contributor)3149_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(Project)4399)dyn_storage": {
        "base": "t_contract(Project)4399",
        "encoding": "dynamic_array",
        "label": "contract Project[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1161": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(Project)4399": {
        "encoding": "inplace",
        "label": "contract Project",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Contributor)3149_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Contributor)",
        "numberOfBytes": "32",
        "value": "t_struct(Contributor)3149_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bool,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bool",
        "label": "mapping(bool => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_contract(Project)4399)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract Project)",
        "numberOfBytes": "32",
        "value": "t_contract(Project)4399"
      },
      "t_mapping(t_uint256,t_mapping(t_bool,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(bool => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bool,t_uint256)"
      },
      "t_struct(Contributor)3149_storage": {
        "encoding": "inplace",
        "label": "struct Contributor",
        "members": [
          {
            "astId": 3142,
            "contract": "contracts/RacksProjectManager.sol:RacksProjectManager",
            "label": "wallet",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3144,
            "contract": "contracts/RacksProjectManager.sol:RacksProjectManager",
            "label": "reputationLevel",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3146,
            "contract": "contracts/RacksProjectManager.sol:RacksProjectManager",
            "label": "reputationPoints",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3148,
            "contract": "contracts/RacksProjectManager.sol:RacksProjectManager",
            "label": "banned",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(List)5250_storage": {
        "encoding": "inplace",
        "label": "struct StructuredLinkedList.List",
        "members": [
          {
            "astId": 5243,
            "contract": "contracts/RacksProjectManager.sol:RacksProjectManager",
            "label": "size",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5249,
            "contract": "contracts/RacksProjectManager.sol:RacksProjectManager",
            "label": "list",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_mapping(t_bool,t_uint256))"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/RacksProjectManager.sol:RacksProjectManager",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/RacksProjectManager.sol:RacksProjectManager",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}